#HCI001
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/norm_brca_integrated.RObj")
library(Seurat)
library(Seurat)
library(dplyr)
library(reshape2)
sessionInfo()
getwd()
setwd("/Users/ryan/pdx-norm-brca-integration-project")
load("seurat-objects/hci001.seurat3.object.Rda")
library(Seurat)
library(dplyr)
library(reshape2)
library(ggplot2)
library(patchwork)
load("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci002.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
load("~/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
readRDS("seurat-objects/hci001.seurat3.object.Rda")
source("seurat-objects/hci001.seurat3.object.Rda")
readRDS("seurat-objects/hci001.seurat3.object.Rda")
install.packages("readr")
load("seurat-objects/hci002.seurat3.object.Rda")
source("seurat-objects/hci002.seurat3.object.Rda")
library(readr)
readRDS("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
source("seurat-objects/hci002.seurat3.object.Rda")
read_rds("seurat-objects/hci002.seurat3.object.Rda")
install.packages("Seurat")
load("seurat-objects/hci001.seurat3.object.Rda")
library(Seurat)
install.packages("ggplot2")
library(ggplot2)
install.packages("scales")
install.packages("colorspace")
install.packages("Seurat")
library(Seurat)
load("seurat-objects/hci001.seurat3.object.Rda")
install.packages("C:/Users/Ryan/Downloads/caTools_1.18.0.tar.gz", repos = NULL, type = "source")
library(Seurat)
install.packages("Seurat")
library(Seurat)
Y
library(Seurat)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
library(Seurat)
load("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci002.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
?FindIntegrationAnchors
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.integrated.epithelial)
?SCTransform
for (i in 1:length(sctransform.object.list)) {
sctransform.object.list[[i]] <- SCTransform(sctransform.object.list[[i]], verbose = TRUE)
}
norm.brca.pdx.features.3000 <- SelectIntegrationFeatures(object.list = sctransform.object.list, nfeatures = 3000)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.features.3000 <- SelectIntegrationFeatures(object.list = sctransform.object.list,
nfeatures = 3000)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
options(future.globals.maxSize = (5000*1024^2))
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
options(future.globals.maxSize = (6000*1024^2))
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.anchors <- FindIntegrationAnchors(object.list = norm.brca.pdx.features.list.3000, normalization.method = "SCT",
anchor.features = norm.brca.pdx.features.3000, verbose = FALSE)
norm.brca.pdx.integrated <- IntegrateData(anchorset = norm.brca.pdx.anchors, normalization.method = "SCT",
verbose = FALSE)
#Now proceed with downstream analysis (i.e. visualization, clustering) on the integrated dataset. Commands are identical to the standard workflow, but do not run the ScaleData function after integration. You can see that after integration, cells group by their biological cell type (which has been pre-annotated), instead of by their underlying technology.
norm.brca.pdx.integrated <- RunPCA(norm.brca.pdx.integrated, verbose = FALSE)
norm.brca.pdx.integrated <- RunUMAP(norm.brca.pdx.integrated, dims = 1:30)
plots <- DimPlot(norm.brca.pdx.integrated, group.by = c("patient.id"))
plots & theme(legend.position = "top") & guides(color = guide_legend(nrow = 3, byrow = TRUE,
override.aes = list(size = 3)))
plots
save(norm.brca.pdx.integrated.3000features, file="seurat-objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
save(norm.brca.pdx.integrated, file="seurat-objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
save(norm.brca.pdx.integrated, file="E:/Scripts/Seurat/Seurat3_Objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
combined_status <- list ()
#Adding the five different classifications to the list
combined_status[grep("NORMAL",norm.brca.pdx.integrated$Status)] <- "Normal"
combined_status[grep("BRCA",norm.brca.pdx.integrated$Status)] <- "BRCA"
combined_status[grep("HCI001",norm.brca.pdx.integrated$patient.id)] <- "HCI001"
combined_status[grep("HCI002",norm.brca.pdx.integrated$patient.id)] <- "HCI002"
combined_status[grep("HCI010",norm.brca.pdx.integrated$patient.id)] <- "HCI010"
#Add new metadata column
norm.brca.pdx.integrated[["combined_status"]] <- as.character(combined_status)
Combined_Cell_Type <- list()
#Get the lung and lymph cells from the PDX models that are metastatic
Combined_Cell_Type[grep("Lung", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
Combined_Cell_Type[grep("Lymph", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
#Get the tumor cells from the PDX models that are tumor cells
Combined_Cell_Type[grep("Tumor", norm.brca.pdx.integrated$tissue)] <- "Tumor"
#Get the cell types from Kevins Norm/BRCA dataset
Combined_Cell_Type[grep("Basal", norm.brca.pdx.integrated$Cell.Type)] <- "Basal"
Combined_Cell_Type[grep("Luminal_1", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_1"
Combined_Cell_Type[grep("Luminal_2", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_2"
Combined_Cell_Type[grep("Unclassified", norm.brca.pdx.integrated$Cell.Type)] <- "Unclassified"
#Add new column
norm.brca.pdx.integrated[["Combined_Cell_Type"]] <- as.character(Combined_Cell_Type)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type")
DimPlot(norm.brca.pdx.integrated, group.by = "Combined_Cell_Type",split.by = "combined_status")
?DimPlot
DimPlot(norm.brca.pdx.integrated, group.by = "Combined_Cell_Type",split.by = "combined_status", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 1)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 0.25)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 0.5)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status", ncol = 2, pt.size = 0.5)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status", ncol = 1, pt.size = 0.5)
