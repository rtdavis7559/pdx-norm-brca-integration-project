"Purine" = purine,
"Pyrimidine" = pyrimidine,
"Pyruvate" = pyruvate,
"Sphingolipid" = sphingolipid,
"Starch_Sucrose" = starch.sucrose,
"Taurine_Hypotaurine" = taurine.hypotaurine,
"Tryptophan" = tryptophan,
"Tyrosine" = tyrosine,
"Valine_Leucine_Isoleucine" = valine.leucine.isoleucine)
metabolism.vln.plots<-list()
metabolism.box.plots<-list()
for (i in 1:length(met.path)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = met.path[[i]],
name = paste(names(met.path[i])),
assay = "RNA")
metabolism.vln.plots<-list()
metabolism.box.plots<-list()
for (i in 1:length(met.path)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = met.path[[i]],
name = paste(names(met.path[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
#import in the txt lists of genes
Oxphos <- read.table("gene_lists/oxphos.txt")
#convert to characters
oxphos <- list("OXPHOS" = Oxphos$V1)
#import in the txt lists of genes
Glycolysis <- read.table("gene_lists/glycolysis.txt")
#convert to characters
glycolysis <- list("Glycolysis" = Glycolysis$V1)
#import in the rest of the gene lists and convert to characters
alanine.aspartate <- read.table("gene_lists/alanine.aspartate.glutamate.txt")
alanine.aspartate <- list("Alanine.Aspartate" = alanine.aspartate$V1)
aminoacyl.tRNA.biosynthesis <- read.table("gene_lists/aminoacyl.tRNA.biosynthesis.txt")
aminoacyl.tRNA.biosynthesis <- list("Aminoacyl.tRNA.Biosynthesis" = aminoacyl.tRNA.biosynthesis$V1)
arachadonic.acid <- read.table("gene_lists/arachadonic.acid.txt")
arachadonic.acid <- list("arachadondic.acid" = arachadonic.acid$V1)
arginine.proline <- read.table("gene_lists/arginine.proline.txt")
arginine.proline <- list("arginine.proline" = arginine.proline$V1)
ascorbate.aldarate <- read.table("gene_lists/ascorbate.aldarate.txt")
ascorbate.aldarate <- list("ascorbate.aldarate" = ascorbate.aldarate$V1)
butanoate <- read.table("gene_lists/butanoate.txt")
butanoate <- list("butanoate" = butanoate$V1)
citric.acid <- read.table("gene_lists/citric.acid.txt")
citric.acid <- list("citric.acid" = citric.acid$V1)
cysteine.methionine <- read.table("gene_lists/cysteine.methionine.txt")
cysteine.methionine <- list("cysteine.methionine" = cysteine.methionine$V1)
ester.lipid <- read.table("gene_lists/ester.lipid.metabolism.txt")
ester.lipid <- list("ester.lipid" = ester.lipid$V1)
fatty.acid <- read.table("gene_lists/fatty.acid.txt")
fatty.acid <- list("fatty.acid" = fatty.acid$V1)
fructose.mannose <- read.table("gene_lists/fructose.mannose.txt")
fructose.mannose <- list("fructose.mannose" = fructose.mannose$V1)
galactose <- read.table("gene_lists/galactose.metabolism.txt")
galactose <- list("galactose" = galactose$V1)
glutathione <- read.table("gene_lists/glutathione.metabolism.txt")
glutathione <- list("glutathione" = glutathione$V1)
glycerolipid <- read.table("gene_lists/glycerolipid.metabolism.txt")
glycerolipid <- list("glycerolipid" = glycerolipid$V1)
glycerophospholipid <- read.table("gene_lists/glycerophospholipid.txt")
glycerophospholipid <- list("glycerophospholipid" = glycerophospholipid$V1)
glycine.serine.threonine <- read.table("gene_lists/glycine.serine.threonine.txt")
glycine.serine.threonine <- list("glycine.serine.threonine" = glycine.serine.threonine$V1)
glycosaminoglycan.biosynthesis.chondroitin<- read.table("gene_lists/glycosaminoglycan.biosynthesis.chondroitin.txt")
glycosaminoglycan.biosynthesis.chondroitin <- list("glycosaminoglycan.biosynthesis.chondroitin" = glycosaminoglycan.biosynthesis.chondroitin$V1)
glycosaminoglycan.biosynthesis.heparan <- read.table("gene_lists/glycosaminoglycan.biosynthesis.heparan.txt")
glycosaminoglycan.biosynthesis.heparan <- list("glycosaminoglycan.biosynthesis.heparan" = glycosaminoglycan.biosynthesis.heparan$V1)
glycosaminoglycan.biosynthesis.keratin <- read.table("gene_lists/glycosaminoglycan.biosynthesis.keratin.txt")
glycosaminoglycan.biosynthesis.keratin <- list("glycosaminoglycan.biosynthesis.keratin" = glycosaminoglycan.biosynthesis.keratin$V1)
glyoxylate.dicarboxylate <- read.table("gene_lists/glyoxylate.dicarboxylate.txt")
glyoxylate.dicarboxylate <- list("glyoxylate.dicarboxylate"= glyoxylate.dicarboxylate$V1)
histidine <- read.table("gene_lists/histidine.txt")
histidine <- list("histidine" = histidine$V1)
linoleic.acid <- read.table("gene_lists/linoleic.acid.txt")
linoleic.acid <- list("linoleic.acid" = linoleic.acid$V1)
lysine.degredation <- read.table("gene_lists/lysine.degradation.txt")
lysine.degredation <- list("lysine.degredation" = lysine.degredation$V1)
pentose.phos <- read.table("gene_lists/pentose.phos.txt")
pentose.phos <- list("pentose.phos" = pentose.phos$V1)
phenylalanine <- read.table("gene_lists/phenylalanine.txt")
phenylalanine <- list("phenylalanine" = phenylalanine$V1)
propanoate <- read.table("gene_lists/propanoate.metabolism.txt")
propanoate<- list("propanoate" = propanoate$V1)
purine <- read.table("gene_lists/purine.metabolism.txt")
purine <- list("purine" = purine$V1)
pyrimidine <- read.table("gene_lists/pyrimidine.metabolism.txt")
pyrimidine <- list("pyrimidine" = pyrimidine$V1)
pyruvate <- read.table("gene_lists/pyruvate.metabolism.txt")
pyruvate <- list ("pyruvate" = pyruvate$V1)
sphingolipid <- read.table("gene_lists/sphingolipid.metabolism.txt")
sphingolipid <- list("sphingolipid" = sphingolipid$V1)
starch.sucrose <- read.table("gene_lists/starch.sucrose.txt")
starch.sucrose <- list("starch.sucrose" = starch.sucrose$V1)
taurine.hypotaurine <- read.table("gene_lists/taurine.hypotaurine.txt")
taurine.hypotaurine <- list("taurine.hypotaurine" = taurine.hypotaurine$V1)
tryptophan <- read.table("gene_lists/tryptophan.txt")
tryptophan <- list("tryptophan" = tryptophan$V1)
tyrosine <- read.table("gene_lists/tyrosine.txt")
tyrosine <- list("tyrosine"= tyrosine$V1)
valine.leucine.isoleucine <- read.table("gene_lists/valine.leucine.isoleucine.txt")
valine.leucine.isoleucine <- list("valine.leucine.isoleucine" = valine.leucine.isoleucine$V1)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate,
"Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis,
"Arachadonic_Acid_Score" = arachadonic.acid,
"Arginine_Proline_Score" = arginine.proline,
"Ascorbate_Aldarate_Score" = ascorbate.aldarate,
"Butanoate_Score"= butanoate,
"Citric_Acid_Score" = citric.acid,
"Cysteine_Methionine_Score" = cysteine.methionine,
"Ester_Lipid_Score" = ester.lipid,
"Fatty_Acid_Score" = fatty.acid,
"Fructose_Mannose_Score" = fructose.mannose,
"Galactose_Score" = galactose,
"Glutathione_Score" = glutathione,
"Glycerolipid_Score" = glycerolipid,
"Glycerophospholipid_Score" = glycerophospholipid,
"Glycine_Serine_Threonine_Score" = glycine.serine.threonine,
"Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin,
"Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan,
"Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin,
"Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate,
"Histidine_Score" = histidine,
"Linoleic_Acid_Score" = linoleic.acid,
"Lysine_Degradation_Score" = lysine.degredation,
"Pentose_Phos_Score" = pentose.phos,
"Phenylalanine_Score" = phenylalanine,
"Propanoate_Score" = propanoate,
"Purine_Score" = purine,
"Pyrimidine_Score" = pyrimidine,
"Pyruvate_Score" = pyruvate,
"Sphingolipid_Score" = sphingolipid,
"Starch_Sucrose_Score" = starch.sucrose,
"Taurine_Hypotaurine_Score" = taurine.hypotaurine,
"Tryptophan_Score" = tryptophan,
"Tyrosine_Score" = tyrosine,
"Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine)
library(Seurat)
library(ggplot2)
library(cowplot)
#import in the txt lists of genes
Oxphos <- read.table("gene_lists/oxphos.txt")
#convert to characters
oxphos <- list("OXPHOS" = Oxphos$V1)
#import in the txt lists of genes
Glycolysis <- read.table("gene_lists/glycolysis.txt")
#convert to characters
glycolysis <- list("Glycolysis" = Glycolysis$V1)
#import in the rest of the gene lists and convert to characters
alanine.aspartate <- read.table("gene_lists/alanine.aspartate.glutamate.txt")
alanine.aspartate <- list("Alanine.Aspartate" = alanine.aspartate$V1)
aminoacyl.tRNA.biosynthesis <- read.table("gene_lists/aminoacyl.tRNA.biosynthesis.txt")
aminoacyl.tRNA.biosynthesis <- list("Aminoacyl.tRNA.Biosynthesis" = aminoacyl.tRNA.biosynthesis$V1)
arachadonic.acid <- read.table("gene_lists/arachadonic.acid.txt")
arachadonic.acid <- list("arachadondic.acid" = arachadonic.acid$V1)
arginine.proline <- read.table("gene_lists/arginine.proline.txt")
arginine.proline <- list("arginine.proline" = arginine.proline$V1)
ascorbate.aldarate <- read.table("gene_lists/ascorbate.aldarate.txt")
ascorbate.aldarate <- list("ascorbate.aldarate" = ascorbate.aldarate$V1)
butanoate <- read.table("gene_lists/butanoate.txt")
butanoate <- list("butanoate" = butanoate$V1)
citric.acid <- read.table("gene_lists/citric.acid.txt")
citric.acid <- list("citric.acid" = citric.acid$V1)
cysteine.methionine <- read.table("gene_lists/cysteine.methionine.txt")
cysteine.methionine <- list("cysteine.methionine" = cysteine.methionine$V1)
ester.lipid <- read.table("gene_lists/ester.lipid.metabolism.txt")
ester.lipid <- list("ester.lipid" = ester.lipid$V1)
fatty.acid <- read.table("gene_lists/fatty.acid.txt")
fatty.acid <- list("fatty.acid" = fatty.acid$V1)
fructose.mannose <- read.table("gene_lists/fructose.mannose.txt")
fructose.mannose <- list("fructose.mannose" = fructose.mannose$V1)
galactose <- read.table("gene_lists/galactose.metabolism.txt")
galactose <- list("galactose" = galactose$V1)
glutathione <- read.table("gene_lists/glutathione.metabolism.txt")
glutathione <- list("glutathione" = glutathione$V1)
glycerolipid <- read.table("gene_lists/glycerolipid.metabolism.txt")
glycerolipid <- list("glycerolipid" = glycerolipid$V1)
glycerophospholipid <- read.table("gene_lists/glycerophospholipid.txt")
glycerophospholipid <- list("glycerophospholipid" = glycerophospholipid$V1)
glycine.serine.threonine <- read.table("gene_lists/glycine.serine.threonine.txt")
glycine.serine.threonine <- list("glycine.serine.threonine" = glycine.serine.threonine$V1)
glycosaminoglycan.biosynthesis.chondroitin<- read.table("gene_lists/glycosaminoglycan.biosynthesis.chondroitin.txt")
glycosaminoglycan.biosynthesis.chondroitin <- list("glycosaminoglycan.biosynthesis.chondroitin" = glycosaminoglycan.biosynthesis.chondroitin$V1)
glycosaminoglycan.biosynthesis.heparan <- read.table("gene_lists/glycosaminoglycan.biosynthesis.heparan.txt")
glycosaminoglycan.biosynthesis.heparan <- list("glycosaminoglycan.biosynthesis.heparan" = glycosaminoglycan.biosynthesis.heparan$V1)
glycosaminoglycan.biosynthesis.keratin <- read.table("gene_lists/glycosaminoglycan.biosynthesis.keratin.txt")
glycosaminoglycan.biosynthesis.keratin <- list("glycosaminoglycan.biosynthesis.keratin" = glycosaminoglycan.biosynthesis.keratin$V1)
glyoxylate.dicarboxylate <- read.table("gene_lists/glyoxylate.dicarboxylate.txt")
glyoxylate.dicarboxylate <- list("glyoxylate.dicarboxylate"= glyoxylate.dicarboxylate$V1)
histidine <- read.table("gene_lists/histidine.txt")
histidine <- list("histidine" = histidine$V1)
linoleic.acid <- read.table("gene_lists/linoleic.acid.txt")
linoleic.acid <- list("linoleic.acid" = linoleic.acid$V1)
lysine.degredation <- read.table("gene_lists/lysine.degradation.txt")
lysine.degredation <- list("lysine.degredation" = lysine.degredation$V1)
pentose.phos <- read.table("gene_lists/pentose.phos.txt")
pentose.phos <- list("pentose.phos" = pentose.phos$V1)
phenylalanine <- read.table("gene_lists/phenylalanine.txt")
phenylalanine <- list("phenylalanine" = phenylalanine$V1)
propanoate <- read.table("gene_lists/propanoate.metabolism.txt")
propanoate<- list("propanoate" = propanoate$V1)
purine <- read.table("gene_lists/purine.metabolism.txt")
purine <- list("purine" = purine$V1)
pyrimidine <- read.table("gene_lists/pyrimidine.metabolism.txt")
pyrimidine <- list("pyrimidine" = pyrimidine$V1)
pyruvate <- read.table("gene_lists/pyruvate.metabolism.txt")
pyruvate <- list ("pyruvate" = pyruvate$V1)
sphingolipid <- read.table("gene_lists/sphingolipid.metabolism.txt")
sphingolipid <- list("sphingolipid" = sphingolipid$V1)
starch.sucrose <- read.table("gene_lists/starch.sucrose.txt")
starch.sucrose <- list("starch.sucrose" = starch.sucrose$V1)
taurine.hypotaurine <- read.table("gene_lists/taurine.hypotaurine.txt")
taurine.hypotaurine <- list("taurine.hypotaurine" = taurine.hypotaurine$V1)
tryptophan <- read.table("gene_lists/tryptophan.txt")
tryptophan <- list("tryptophan" = tryptophan$V1)
tyrosine <- read.table("gene_lists/tyrosine.txt")
tyrosine <- list("tyrosine"= tyrosine$V1)
valine.leucine.isoleucine <- read.table("gene_lists/valine.leucine.isoleucine.txt")
valine.leucine.isoleucine <- list("valine.leucine.isoleucine" = valine.leucine.isoleucine$V1)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate,
"Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis,
"Arachadonic_Acid_Score" = arachadonic.acid,
"Arginine_Proline_Score" = arginine.proline,
"Ascorbate_Aldarate_Score" = ascorbate.aldarate,
"Butanoate_Score"= butanoate,
"Citric_Acid_Score" = citric.acid,
"Cysteine_Methionine_Score" = cysteine.methionine,
"Ester_Lipid_Score" = ester.lipid,
"Fatty_Acid_Score" = fatty.acid,
"Fructose_Mannose_Score" = fructose.mannose,
"Galactose_Score" = galactose,
"Glutathione_Score" = glutathione,
"Glycerolipid_Score" = glycerolipid,
"Glycerophospholipid_Score" = glycerophospholipid,
"Glycine_Serine_Threonine_Score" = glycine.serine.threonine,
"Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin,
"Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan,
"Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin,
"Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate,
"Histidine_Score" = histidine,
"Linoleic_Acid_Score" = linoleic.acid,
"Lysine_Degradation_Score" = lysine.degredation,
"Pentose_Phos_Score" = pentose.phos,
"Phenylalanine_Score" = phenylalanine,
"Propanoate_Score" = propanoate,
"Purine_Score" = purine,
"Pyrimidine_Score" = pyrimidine,
"Pyruvate_Score" = pyruvate,
"Sphingolipid_Score" = sphingolipid,
"Starch_Sucrose_Score" = starch.sucrose,
"Taurine_Hypotaurine_Score" = taurine.hypotaurine,
"Tryptophan_Score" = tryptophan,
"Tyrosine_Score" = tyrosine,
"Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine)
for (i in 1:length(metabolism.pathways)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathways[[i]],
name = paste(names(metabolism.pathways[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
}
for (i in 1:length(metabolism.pathways)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathways[[i]],
name = paste(names(metabolism.pathways[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
for (i in 1:length(met.path)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = met.path[[i]],
name = paste(names(met.path[i])),
assay = "RNA")
print(paste("Calculating",names(met.path[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(met.path[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
}
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#for loop to make each column a list
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
#make a list for the metabolic pathways and add in dictionary to make list of lists
metabolism.pathway.1 <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathway.1[[i]] = mydict[[i]]
}
#Add scores and plotting for the metabolism gene lists via a for loop
metabolism.vln.plots<-list()
metabolism.box.plots<-list()
for (i in 1:length(metabolism.pathway)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathway[[i]],
name = paste(names(metabolism.pathway[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
}
View(metabolism.pathway.1)
for (i in 1:length(metabolism.pathway.1)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathway.1[[i]],
name = paste(names(metabolism.pathway.1[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathway.1[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathway.1[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
}
Norm.BRCA.1 <- AddModuleScore(Norm.BRCA, features = met.path, assay = "RNA")
library(Seurat)
library(Seurat)
library(dplyr)
library(reshape2)
library(SeuratData)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda ")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
colnames(norm.brca.epithelial.object@meta.data)
head(norm.brca.epithelial.object$Compartment)
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
View(norm.brca.integrated.epithelial)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(norm.brca.stromal.object)
rm(norm.brca.subset.objects)
rm(norm.brca.epithelial.object)
rm(norm.brca.integrated.epithelial)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(p01.counts)
rm(p02.counts)
rm(p10.counts)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"norm"=norm.brca.epithelial.object)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(norm.brca.epithelial.object)
rm(norm.brca.integrated.epithelial)
rm(norm.brca.stromal.object)
rm(norm.brca.subset.objects)
rm(p01.counts)
rm(p02.countrs)
rm(p02.countrs)
rm(p02.counts)
rm(p10.counts)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(reference.list)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
memory.size()
ulimit()
ulimit
devtools::install_github("krlmlr/ulimit")
ulimit::memory_limit(2000)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
