#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda"")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda"")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
library(Seurat)
library(dplyr)
library(reshape2)
```{r load.objects}
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
#load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/norm_brca_integrated.RObj")
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
library(Seurat)
library(dplyr)
library(reshape2)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/Desktop/Kevin_Data/Kevin_Data/Subset.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
#norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-Subset$EPITHELIAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
#norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-Subset$EPITHELIAL
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-Subset$EPITHELIAL
norm.brca.stromal.object<-Subset$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
#norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-Subset.object$EPITHELIAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Subset,"Compartment")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Subset,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.object$EPITHELIAL
View(norm.brca.subset.objects)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Subset,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.object$EPITHELIAL
View(Subset)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Subset,"Compartment")
library(Seurat)
library(dplyr)
library(reshape2)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/Desktop/Kevin_Data/Kevin_Data/norm_brca_integrated.RObj")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated,"Compartment")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.object$EPITHELIAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
library(Seurat)
library(dplyr)
library(reshape2)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/Desktop/Kevin_Data/Kevin_Data/norm_brca_integrated.RObj")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.object$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.object$STROMAL
View(Norm.BRCA.integrated)
library(Seurat)
library(dplyr)
library(reshape2)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/Desktop/Kevin_Data/Kevin_Data/norm_brca_integrated.RObj")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(Norm.BRCA.integrated,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.object$EPITHELIAL
View(norm.brca.subset.objects)
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
colnames(norm.brca.epithelial.object@meta.data)
head(norm.brca.epithelial.object$Compartment)
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = FALSE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = FALSE)
}
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
install.packages("Seurat")
install.packages("Seurat")
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
standard.workflow.object.list[[1]]
standard.workflow.object.list[[4]]
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- object.list
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list = object.list
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <-
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list [c("smartseq2", "smartseq2", "smartseq2", "10X")]
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
View(standard.workflow.object.list)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list [c("hci001", "hci002", "hci010", "norm")]
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list[c("hci001", "hci002", "hci010", "norm")]
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
View(reference.list)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list[c("hci001", "hci002", "hci010", "norm")]
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list, reference.list = NULL, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list, reference.list = NULL, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
integration.anchors <- FindIntegrationAnchors(object.list = standard.workflow.object.list, reference.list = NULL, dims = 1:30)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list[c("hci001", "hci002", "hci010", "norm")]
integration.anchors <- FindIntegrationAnchors(standard.workflow.object.list = reference.list, dims = 1:30)
library(Seurat)
library(Seurat)
library(dplyr)
library(reshape2)
library(SeuratData)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
colnames(norm.brca.epithelial.object@meta.data)
head(norm.brca.epithelial.object$Compartment)
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#load necessary packages for visualization
library(ggplot2)
library(cowplot)
library(patchwork)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
DefaultAssay(integrated.data) <- "integrated"
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
PCA.integrated.data<- RunPCA(scale.integrated.data, npcs = 30, verbose = TRUE)
UMAP.integrated.data <- RunUMAP(PCA.integrated.data, reduction = "pca", dims = 1:30)
DimPlot(UMAP.integrated.data, reduction = "umap", label = TRUE, group.by = "Combined_Cell_Type")
#Generate new list for the dataset type
Combined_Classification <- list ()
#Adding the five different classifications to the list
Combined_Classification[grep("NORMAL",UMAP.integrated.data$Status)] <- "Normal"
Combined_Classification[grep("BRCA",UMAP.integrated.data$Status)] <- "BRCA"
Combined_Classification[grep("HCI001",UMAP.integrated.data$patient.id)] <- "HCI001"
Combined_Classification[grep("HCI002",UMAP.integrated.data$patient.id)] <- "HCI002"
Combined_Classification[grep("HCI010",UMAP.integrated.data$patient.id)] <- "HCI010"
#Add new metadata column
UMAP.integrated.data[["Combined_Classification"]] <- as.character(Combined_Classification)
#Generate new list for the cell type
Combined_Cell_Type <- list()
#Get the lung and lymph cells from the PDX models that are metastatic
Combined_Cell_Type[grep("Lung", UMAP.integrated.data$tissue)] <- "Metastatic"
Combined_Cell_Type[grep("Lymph", UMAP.integrated.data$tissue)] <- "Metastatic"
#Get the tumor cells from the PDX models that are tumor cells
Combined_Cell_Type[grep("Tumor", UMAP.integrated.data$tissue)] <- "Tumor"
#Get the cell types from Kevins Norm/BRCA dataset
Combined_Cell_Type[grep("Basal", UMAP.integrated.data$Cell.Type)] <- "Basal"
Combined_Cell_Type[grep("Luminal_1", UMAP.integrated.data$Cell.Type)] <- "Luminal_1"
Combined_Cell_Type[grep("Luminal_2", UMAP.integrated.data$Cell.Type)] <- "Luminal_2"
Combined_Cell_Type[grep("Unclassified", UMAP.integrated.data$Cell.Type)] <- "Unclassified"
#Add new column
UMAP.integrated.data[["Combined_Cell_Type"]] <- as.character(Combined_Cell_Type)
PCA.integrated.data.by.patient<- RunPCA(scale.integrated.data.by.patient, npcs = 30, verbose = TRUE)
#look to scale the integrated data by patient using the new combined classification list to see if this improves the clustering
scale.integrated.data.by.patient <- ScaleData(UMAP.integrated.data, verbose = TRUE, vars.to.regress = "Combined_Classification")
PCA.integrated.data.by.patient<- RunPCA(scale.integrated.data.by.patient, npcs = 30, verbose = TRUE)
UMAP.integrated.data.by.patient <- RunUMAP(PCA.integrated.data.by.patient, reduction = "pca", dims = 1:30)
DimPlot(UMAP.integrated.data.by.patient, reduction = "umap", label = TRUE, group.by = "Combined_Cell_Type")
