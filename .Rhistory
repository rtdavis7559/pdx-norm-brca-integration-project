View(p01.counts)
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
rm(p01.counts,p02.counts,p10.counts)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
rm(norm.brca.integrated.epithelial, norm.brca.stromal.object)
rm(norm.brca.subset.objects)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.individual.1.objects<-norm.brca.epithelial.individual.objects$ind1
norm.brca.epithelial.individual.2.objects<-norm.brca.epithelial.individual.objects$ind2
norm.brca.epithelial.individual.3.objects<-norm.brca.epithelial.individual.objects$ind3
norm.brca.epithelial.individual.4.objects<-norm.brca.epithelial.individual.objects$ind4
norm.brca.epithelial.individual.9.objects<-norm.brca.epithelial.individual.objects$ind9
norm.brca.epithelial.individual.10.objects<-norm.brca.epithelial.individual.objects$ind10
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"n_patient1"=norm.brca.epithelial.individual.1.objects, "b_patient2"=norm.brca.epithelial.individual.2.objects, "b_patient3"=norm.brca.epithelial.individual.3.objects, "b_patient4" = norm.brca.epithelial.individual.4.objects, "n_patient9" = norm.brca.epithelial.individual.9.objects, "n_patient10"=norm.brca.epithelial.individual.10.objects )
rm(p01.counts,p02.counts,p10.counts,norm.brca.epithelial.object,norm.brca.epithelial.individual.1.objects,norm.brca.epithelial.individual.10.objects,norm.brca.epithelial.individual.2.objects,norm.brca.epithelial.individual.3.objects,norm.brca.epithelial.individual.4.objects,norm.brca.epithelial.individual.9.objects,norm.brca.epithelial.individual.objects,norm.brca.epithelial.object,norm.brca.integrated.epithelial,norm.brca.stromal.object,norm.brca.subset.objects)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(reference.list,standard.workflow.object.list)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
library(Seurat)
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.individual.1.objects<-norm.brca.epithelial.individual.objects$ind1
norm.brca.epithelial.individual.2.objects<-norm.brca.epithelial.individual.objects$ind2
norm.brca.epithelial.individual.3.objects<-norm.brca.epithelial.individual.objects$ind3
norm.brca.epithelial.individual.4.objects<-norm.brca.epithelial.individual.objects$ind4
norm.brca.epithelial.individual.9.objects<-norm.brca.epithelial.individual.objects$ind9
norm.brca.epithelial.individual.10.objects<-norm.brca.epithelial.individual.objects$ind10
rm(norm.brca.epithelial.object,norm.brca.stromal.object,norm.brca.subset.objects)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"n_patient1"=norm.brca.epithelial.individual.1.objects, "b_patient2"=norm.brca.epithelial.individual.2.objects, "b_patient3"=norm.brca.epithelial.individual.3.objects, "b_patient4" = norm.brca.epithelial.individual.4.objects, "n_patient9" = norm.brca.epithelial.individual.9.objects, "n_patient10"=norm.brca.epithelial.individual.10.objects )
rm(p01.counts,p02.counts,p10.counts,norm.brca.epithelial.individual.1.objects,norm.brca.epithelial.individual.10.objects,norm.brca.epithelial.individual.2.objects,norm.brca.epithelial.individual.3.objects,norm.brca.epithelial.individual.4.objects,norm.brca.epithelial.individual.9.objects,norm.brca.epithelial.individual.objects,norm.brca.integrated.epithelial)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
rm(reference.list,standard.workflow.object.list)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
library(Seurat)
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.individual.1.objects<-norm.brca.epithelial.individual.objects$ind1
norm.brca.epithelial.individual.2.objects<-norm.brca.epithelial.individual.objects$ind2
norm.brca.epithelial.individual.3.objects<-norm.brca.epithelial.individual.objects$ind3
norm.brca.epithelial.individual.4.objects<-norm.brca.epithelial.individual.objects$ind4
norm.brca.epithelial.individual.9.objects<-norm.brca.epithelial.individual.objects$ind9
norm.brca.epithelial.individual.10.objects<-norm.brca.epithelial.individual.objects$ind10
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"n_patient1"=norm.brca.epithelial.individual.1.objects, "b_patient2"=norm.brca.epithelial.individual.2.objects, "b_patient3"=norm.brca.epithelial.individual.3.objects, "b_patient4" = norm.brca.epithelial.individual.4.objects, "n_patient9" = norm.brca.epithelial.individual.9.objects, "n_patient10"=norm.brca.epithelial.individual.10.objects )
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
rm(norm.brca.epithelial.individual.1.objects,norm.brca.epithelial.individual.10.objects,norm.brca.epithelial.individual.2.objects,norm.brca.epithelial.individual.3.objects,norm.brca.epithelial.individual.4.objects,norm.brca.epithelial.individual.9.objects,norm.brca.epithelial.individual.objects,norm.brca.epithelial.object,norm.brca.integrated.epithelial,norm.brca.stromal.object,norm.brca.subset.objects,p01.counts,p02.counts,p10.counts)
rm(reference.list,standard.workflow.object.list)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
integrated.data
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#UMAP.integrated.data <- RunUMAP(PCA.integrated.data, reduction = "pca", dims = 1:30)
UMAP.integrated.data <- readRDS("/Users/paigehalas/Desktop/UMAP.integrated.data.rds")
DimPlot(UMAP.integrated.data, reduction = "umap", label = TRUE)
install.packages("Seurat")
library(Seurat)
library(dplyr)
library(reshape2)
#library(SeuratData)
install.packages("Seurat")
#load necessary packages for visualization
library(ggplot2)
library(cowplot)
library(patchwork)
?DimPlot
#install.packages("Seurat")
library(Seurat)
#install.packages("Seurat")
library(Seurat)
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "individual" column, to generate 6 new objects, for each patient.
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.individual.1.objects<-norm.brca.epithelial.individual.objects$ind1
norm.brca.epithelial.individual.2.objects<-norm.brca.epithelial.individual.objects$ind2
norm.brca.epithelial.individual.3.objects<-norm.brca.epithelial.individual.objects$ind3
norm.brca.epithelial.individual.4.objects<-norm.brca.epithelial.individual.objects$ind4
norm.brca.epithelial.individual.9.objects<-norm.brca.epithelial.individual.objects$ind9
norm.brca.epithelial.individual.10.objects<-norm.brca.epithelial.individual.objects$ind10
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"n_patient1"=norm.brca.epithelial.individual.1.objects, "b_patient2"=norm.brca.epithelial.individual.2.objects, "b_patient3"=norm.brca.epithelial.individual.3.objects, "b_patient4" = norm.brca.epithelial.individual.4.objects, "n_patient9" = norm.brca.epithelial.individual.9.objects, "n_patient10"=norm.brca.epithelial.individual.10.objects )
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.counts,"hci002"=p02.counts,"hci010"=p10.counts,"n_patient1"=norm.brca.epithelial.individual.1.objects, "b_patient2"=norm.brca.epithelial.individual.2.objects, "b_patient3"=norm.brca.epithelial.individual.3.objects, "b_patient4" = norm.brca.epithelial.individual.4.objects, "n_patient9" = norm.brca.epithelial.individual.9.objects, "n_patient10"=norm.brca.epithelial.individual.10.objects )
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
rm(norm.brca.epithelial.individual.1.objects,norm.brca.epithelial.individual.10.objects,norm.brca.epithelial.individual.2.objects,norm.brca.epithelial.individual.3.objects,norm.brca.epithelial.individual.4.objects,norm.brca.epithelial.individual.9.objects,norm.brca.epithelial.individual.objects,norm.brca.epithelial.individual.objects,norm.brca.epithelial.object,norm.brca.integrated.epithelial,norm.brca.stromal.object,norm.brca.stromal.object,norm.brca.subset.objects)
rm(p01.counts,p02.counts,p10.counts)
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
save(integrated.data, file = "/Users/paigehalas/Desktop/integrated.data.rda")
rm(reference.list,standard.workflow.object.list,integration.anchors)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
PCA.integrated.data<- RunPCA(scale.integrated.data, npcs = 30, verbose = TRUE)
t.integrated.data <- load("/Users/paigehalas/Desktop/integrated.data.Rda")
t.integrated.data
name(t.integrated.data)
load("/Users/paigehalas/Desktop/integrated.data.Rda")
rm(integrated.data)
load("/Users/paigehalas/Desktop/integrated.data.Rda")
UMAP.integrated.data <- readRDS("/Users/paigehalas/Desktop/UMAP.integrated.data.rds")
rm(PCA.integrated.data,scale.integrated.data)
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA")
UMAP.integrated.data@meta.data$nFeature_RNA
?FeaturePlot
FeaturePlot(integrated.data, features = "nFeature_RNA")
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA", label=TRUE)
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA", label=TRUE)
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA", label=FALSE)
UMAP.integrated.data@meta.data$percent.mito
FeaturePlot(UMAP.integrated.data, features = "percent.mito", label=TRUE)
FeaturePlot(UMAP.integrated.data, features = "percent.mito", label=FALSE)
DefaultAssay(integrated.data) <- "RNA"
integrated.data[["percent.mt"]] <- PercentageFeatureSet(integrated.data, pattern = "^MT-")
FeaturePlot(UMAP.integrated.data, features = "percent.mt")
DefaultAssay(UMAP.integrated.data) <- "RNA"
UMAP.integrated.data[["percent.mt"]] <- PercentageFeatureSet(UMAP.integrated.data, pattern = "^MT-")
FeaturePlot(UMAP.integrated.data,features = "percent.mt")
?ScaleData
DefaultAssay(integrated.data) <- "integrated"
r.scale.integrated.data <- ScaleData(integrated.data, var.to.regress=c(nFeature_RNA, percent.mt), verbose = TRUE)
r.scale.integrated.data <- ScaleData(integrated.data, var.to.regress=c("nFeature_RNA", "percent.mt"), verbose = TRUE)
r.scale.integrated.data <- ScaleData(integrated.data, vars.to.regress=c(nFeature_RNA, percent.mt), verbose = TRUE)
integrated.data@assays$integrated
integrated.data@meta.data$nFeature_RNA
DefaultAssay(integrated.data) <- "integrated"
ActiveAssay(integrated.data)
DefaultAssay(integrated.data)
r.scale.integrated.data <- ScaleData(integrated.data, vars.to.regress=c(nFeature_RNA, percent.mt), verbose = TRUE)
integrated.data@active.assay
r.scale.integrated.data <- ScaleData(integrated.data, vars.to.regress=c((nFeature_RNA, percent.mt)), verbose = TRUE)
r.scale.integrated.data <- ScaleData(integrated.data, vars.to.regress=c(nFeature_RNA, percent.mt), verbose = TRUE)
r.scale.integrated.data <- ScaleData(integrated.data, vars.to.regress=c(nFeature_RNA, percent.mt))
r.scale.integrated.data <- ScaleData(integrated.data,vars.to.regress=c(nFeature_RNA, percent.mt))
r.scale.integrated.data <- ScaleData(integrated.data,vars.to.regress=c("nFeature_RNA", "percent.mt"))
r.PCA.integrated.data<- RunPCA(r.scale.integrated.data, npcs = 30, verbose = TRUE)
r.UMAP.integrated.data <- RunUMAP(r.PCA.integrated.data, reduction = "pca", dims = 1:30)
DimPlot(r.UMAP.integrated.data, reduction = "umap", label = TRUE)
DimPlot(r.UMAP.integrated.data, reduction = "umap", label = FALSE)
DimPlot(r.UMAP.integrated.data, reduction = "umap", label = TRUE)
FeaturePlot(UMAP.integrated.data, features = nFeature_RNA)
FeaturePlot(UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(r.UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(r.UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(r.UMAP.integrated.data, features = "percent.mt")
DefaultAssay(r.UMAP.integrated.data)
r.UMAP.integrated.data@assays$integrated@scale.data
dim(r.UMAP.integrated.data@assays$integrated@scale.data)
head(r.UMAP.integrated.data@assays$integrated@scale.data)
head(r.UMAP.integrated.data@assays$integrated@scale.data)
head(r.scale.integrated.data)
head(r.UMAP.integrated.data)
head(UMAP.integrated.data)
head(r.UMAP.integrated.data@assays$integrated@scaled.data)
head(UMAP.integrated.data@assays$integrated@scale.data)
head(UMAP.integrated.data@assays$integrated@scale.data)[1:5,1:5]
head(r.UMAP.integrated.data@assays$integrated@scale.data)[1:5,1:5]
rm(r.PCA.integrated.data,r.scale.integrated.data,r.UMAP.integrated.data)
DefaultAssay(integrated.data) <- "RNA"
integrated.data[["percent.mt"]] <- PercentageFeatureSet(integrated.data, pattern = "^MT-")
FeaturePlot(UMAP.integrated.data, features = "percent.mt")
DefaultAssay(integrated.data) <- "integrated"
DefaultAssay(integrated.data) <- "integrated"
r.scale.integrated.data <- ScaleData(integrated.data,vars.to.regress=c("nFeature_RNA", "percent.mt"))
FeaturePlot(UMAP.integrated.data, features = "percent.mt")
DefaultAssay(integrated.data) <- "RNA"
integrated.data[["percent.mt"]] <- PercentageFeatureSet(integrated.data, pattern = "^MT-")
rm(integrated.data, UMAP.integrated.data)
#name your dictionary
mydict <- dict()
#install the dict package from github to create a dictionary
#if (!require("devtools")) install.packages("devtools")
#devtools::install_github("mkuhn/dict")
#load the dict library
library(dict)
#name your dictionary
mydict <- dict()
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#to read in the Excel file
library(readxl)
#name your dictionary
mydict <- dict()
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#convert list of genes into characters
rest_genes_V <- as.character(rest_genes_V)
#for loop to make add to the dictionary where the pathway is the key and the value is the list of genes in that pathway: i.e. Oxphos is the key and its genes are the value
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
Norm.BRCA <- norm.brca.integrated.epithelial
#set the DefaultAssay for the Norm.BRCA to be RNA
DefaultAssay(Norm.BRCA)<-"RNA"
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#print(paste("Calculating",names(metabolism.pathway.1[i])))
#test to see if you can plot one of the metadafeatures
VlnPlot(x, features = "Tryptophan.metabolism1", assay = "RNA", group.by = "Cell.Type")
#load required packages
library(reshape2)
library(ggplot2)
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
View(x)
#load required packages
library(reshape2)
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
S.metabolism.box.plot.matrix.melted<-melt(S.metabolism.box.plot.matrix)
View(norm.brca.integrated.epithelial)
View(x)
View(x)
x@meta.data
#set the DefaultAssay for the Norm.BRCA to be RNA
DefaultAssay(Norm.BRCA)<-"RNA"
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
library(Seurat)
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
library(Seurat)
library(ggplot2)
library(cowplot)
#install the dict package from github to create a dictionary
#if (!require("devtools")) install.packages("devtools")
#devtools::install_github("mkuhn/dict")
#load the dict library
library(dict)
#to read in the Excel file
library(readxl)
#name your dictionary
mydict <- dict()
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#convert list of genes into characters
rest_genes_V <- as.character(rest_genes_V)
#for loop to make add to the dictionary where the pathway is the key and the value is the list of genes in that pathway: i.e. Oxphos is the key and its genes are the value
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
Norm.BRCA <- norm.brca.integrated.epithelial
#set the DefaultAssay for the Norm.BRCA to be RNA
DefaultAssay(Norm.BRCA)<-"RNA"
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#print(paste("Calculating",names(metabolism.pathway.1[i])))
View(x)
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
View(rest_genes_V)
View(mydict)
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
print(paste("Calculating",names(metabolism.pathway.1[i])))
View(Norm.BRCA)
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
mydict$keys()
mydict$keys
View(mydict)
View(mydict)
