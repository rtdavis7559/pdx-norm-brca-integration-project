View(mydict)
library(Seurat)
library(ggplot2)
library(cowplot)
#install the dict package from github to create a dictionary
#if (!require("devtools")) install.packages("devtools")
#devtools::install_github("mkuhn/dict")
#load the dict library
library(dict)
#to read in the Excel file
library(readxl)
#name your dictionary
mydict <- dict()
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#convert list of genes into characters
rest_genes_V <- as.character(rest_genes_V)
#for loop to make add to the dictionary where the pathway is the key and the value is the list of genes in that pathway: i.e. Oxphos is the key and its genes are the value
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
Norm.BRCA <- norm.brca.integrated.epithelial
#set the DefaultAssay for the Norm.BRCA to be RNA
DefaultAssay(Norm.BRCA)<-"RNA"
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#print(paste("Calculating",names(metabolism.pathway.1[i])))
?AddModuleScore
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#for loop to make add to the dictionary where the pathway is the key and the value is the list of genes in that pathway: i.e. Oxphos is the key and its genes are the value
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#prepare an excel file of all the genes where every column is a pathway name and its respective list of genes
#import list
rest_genes_V <- read_excel("~/Documents/UCI Grad School/CMB PhD Year 1/Lawson Lab/rest_genes_V.xlsx")
#for loop to make add to the dictionary where the pathway is the key and the value is the list of genes in that pathway: i.e. Oxphos is the key and its genes are the value
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
Norm.BRCA <- norm.brca.integrated.epithelial
#loop through the dictionary to calculate the module scores for each key in the dictionary (i.e. each pathway (key) and its genes (values))
#need to set the object equal to a different variable so it can be seperately tracked
#in for loop you need to set object equal to itself or else it keeps writing itself over and not adding to the metadata as it calculates module scoring
x=Norm.BRCA
for (i in (mydict$keys())){
print(i)
x <- AddModuleScore(object = x,
features = mydict[[i]],
name = i,
assay = "RNA")
}
#test to see if you can plot one of the metadafeatures
VlnPlot(x, features = "Tryptophan.metabolism1", assay = "RNA", group.by = "Cell.Type")
#making the new matrix to build box plots off of with all the pathways calculated
S.metabolism.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,33:69])
S.metabolism.box.plot.matrix.melted<-melt(S.metabolism.box.plot.matrix)
#load required packages
library(reshape2)
S.metabolism.box.plot.matrix.melted<-melt(S.metabolism.box.plot.matrix)
#renaming the columns to be interpretible values
colnames(S.metabolism.box.plot.matrix.melted)<-c("cell.type","status","pathway","score")
ggplot(S.metabolism.box.plot.matrix.melted,
aes(x=cell.type,
y=score,
fill=status))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
ggplot(S.metabolism.box.plot.matrix.melted,
aes(x=cell.type,
y=score,
fill=status))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
?knit
library(ggplot2)
ggplot(S.metabolism.box.plot.matrix.melted,
aes(x=cell.type,
y=score,
fill=status))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
x@meta.data
colnames(x@meta.data)
#do this for cell type with just glycolysis and Oxphos
ct.metabolism.interest.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,4], x@meta.data[,c(65,69)])
ct.metabolism.interest.box.plot.matrix.melted<-melt(ct.metabolism.interest.box.plot.matrix)
colnames(ct.metabolism.interest.box.plot.matrix.melted)<-c("cell.type","status","individual","pathway","score")
#plot just the glycolysis and oxphos datapoints
ggplot(ct.metabolism.interest.box.plot.matrix.melted,
aes(x=status,
y=score,
fill=cell.type,
linetype=individual))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
#do this for cell type with just glycolysis and Oxphos
ct.metabolism.interest.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,4], x@meta.data[,c(65,69)])
ct.metabolism.interest.box.plot.matrix.melted<-melt(ct.metabolism.interest.box.plot.matrix)
colnames(ct.metabolism.interest.box.plot.matrix.melted)<-c("cell.type","status","individual","pathway","score")
#plot just the glycolysis and oxphos datapoints
ggplot(ct.metabolism.interest.box.plot.matrix.melted,
aes(x=status,
y=score,
fill=cell.type,
linetype=individual))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
S.metabolism.box.plot.matrix.melted<-melt(S.metabolism.box.plot.matrix)
#renaming the columns to be interpretible values
colnames(S.metabolism.box.plot.matrix.melted)<-c("cell.type","status","pathway","score")
colnames(S.metabolism.interes.box.plot.matrix)
x@meta.data
colnames(x@meta.data)
colnames(S.metabolism.box.plot.matrix)
#load required packages
library(reshape2)
#making a new box plot matrix with only relevent pathways
S.metabolism.interest.box.plot.matrix<- cbind(x@meta.data[,13], x@meta.data[,8], x@meta.data[,4], x@meta.data[,c(33,40,47,40,51,54,55,57,65,68,69)])
#melting matrix together
S.metabolism.interest.box.plot.matrix.melted<-melt(S.metabolism.interest.box.plot.matrix)
#renaming columns in new matrix
colnames(S.metabolism.interest.box.plot.matrix.melted)<-c("cell.type","status","individual","pathway","score")
#plotting matrix with pathways of interest
ggplot(S.metabolism.interest.box.plot.matrix.melted,
aes(x=cell.type,
y=score,
fill=status,
linetype=individual))+
geom_boxplot()+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())+
geom_hline(yintercept = 0,size=1, color="black")+
facet_wrap(~pathway, scales = "free")
#plot_grid(plotlist = metabolism.vln.plots,ncol = 7)
#load("/Users/paigehalas/Desktop/integrated.data.all.genes.scale.rda")
markers.RNA <- read.table("/Users/paigehalas/Desktop/norm.brca.pdx.std.integrated.res025.RNA.markers.RNA.txt")
#load("/Users/paigehalas/Desktop/integrated.data.all.genes.scale.rda")
markers.RNA <- read.table("/Users/paigehalas/Desktop/norm.brca.pdx.std.integrated.res025.RNA.markers.RNA.txt")
top10 <- markers.RNA %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
library(dplyr)
#load("/Users/paigehalas/Desktop/integrated.data.all.genes.scale.rda")
markers.RNA <- read.table("/Users/paigehalas/Desktop/norm.brca.pdx.std.integrated.res025.RNA.markers.RNA.txt")
top10 <- markers.RNA %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
#top10 <- as.character(top10$gene)
DoHeatmap(integrated.data, features = top10$gene, assay = "RNA") + NoLegend()
library(Seurat)
#load("/Users/paigehalas/Desktop/integrated.data.all.genes.scale.rda")
markers.RNA <- read.table("/Users/paigehalas/Desktop/norm.brca.pdx.std.integrated.res025.RNA.markers.RNA.txt")
top10 <- markers.RNA %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
#top10 <- as.character(top10$gene)
DoHeatmap(integrated.data, features = top10$gene, assay = "RNA") + NoLegend()
load("/Users/paigehalas/Desktop/integrated.data.Rda")
load("/Users/paigehalas/Desktop/integrated.data.Rda")
load("/Users/paigehalas/Desktop/integrated.data.Rda")
r.UMAP.integrated.data <- readRDS("/Users/paigehalas/Desktop/r.UMAP.integrated.data.rds")
FeaturePlot(r.UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(r.UMAP.integrated.data, features = "percent.mito")
r.UMAP.integrated.data[["percent.mt"]] <- PercentageFeatureSet(UMAP.integrated.data, pattern = "^MT-")
r.UMAP.integrated.data[["percent.mt"]] <- PercentageFeatureSet(r.UMAP.integrated.data, pattern = "^MT-")
DefaultAssay(r.UMAP.integrated.data) <- "RNA"
r.UMAP.integrated.data[["percent.mt"]] <- PercentageFeatureSet(r.UMAP.integrated.data, pattern = "^MT-")
FeaturePlot(r.UMAP.integrated.data, features = "nFeature_RNA")
FeaturePlot(r.UMAP.integrated.data, features = "percent.mt")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
rm(integrated.data,r.UMAP.integrated.data)
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
hci001.achors <- FindTransferAnchors(anchorset=hc001.anchors, refdata=norm.brca.integrated.epithelial$Coarse.Ident, dims 1:30)
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci001.achors <- FindTransferAnchors(anchorset=hc001.anchors, refdata=norm.brca.integrated.epithelial$Coarse.Ident, dims 1:30)
hci001.query <- p01.counts
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci001.achors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hc001.query, dims = 1:30)
hci001.achors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hci001.query, dims = 1:30)
predictions <- TransferData(anchorset = hci001.anchors, refdata = norm.brca.integrated.epithelial$Coarse.Ident,
dims = 1:30)
rm(hci001.achors)
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci001.anchors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hci001.query, dims = 1:30)
predictions <- TransferData(anchorset = hci001.anchors, refdata = norm.brca.integrated.epithelial$Coarse.Ident,
dims = 1:30)
hci001.query <- AddMetaData(hci001.query, metadata = predictions)
rm(p01.counts)
save(hci001.query, file = ("/Users/paigehalas/Desktop/hci001.counts.label.transfer.Rda")
save(hci001.query, file = "/Users/paigehalas/Desktop/hci001.counts.label.transfer.Rda")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#Reorder HCI001 Meta Data
p01.cc.updated[["cell.names"]]<-rownames(p01.cc.updated@meta.data)
rownames(p01.counts)
p01.counts[["cell.names"]]<-rownames(p01.counts@meta.data)
rownames(p01.counts)
p01.counts@meta.data<-arrange(p01.counts@meta.data, cell.names)
rownames(p01.counts@meta.data)<-as.character(p01.counts$cell.names)
colnames(p01.counts@meta.data)
rownames(p01.counts@meta.data)
p01.counts@meta.data<-arrange(p01.counts@meta.data, cell.names)
?arrange
library(dplyr)
p01.counts@meta.data<-arrange(p01.counts@meta.data, cell.names)
rownames(p01.counts@meta.data)<-as.character(p01.counts$cell.names)
#Add HCI001 Meta Data to Counts Seurat Object
p01.counts[["mouse"]]<-p01.cc.updated$mouse
#Add HCI001 Meta Data to Counts Seurat Object
p01.counts[["mouse"]]<-p01.counts$mouse
#Reorder HCI002 Meta Data
p02.updated[["cell.names"]]<-rownames(p02.updated@meta.data)
p02.counts[["cell.names"]]<-rownames(p02.counts@meta.data)
p02.counts@meta.data<-arrange(p02.counts@meta.data, cell.names)
rownames(p02.counts@meta.data)<-as.character(p02.counts$cell.names)
#Add HCI002 Meta Data to Counts Seurat Object
p02.counts[["mouse"]]<-p02.updated$mouse
p02.counts[["burden"]]<-p02.updated$burden
#Load TPM Seurat Objects to Transfer MetaData
load("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci002.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
#Reorder HCI001 Meta Data
p01.cc.updated[["cell.names"]]<-rownames(p01.cc.updated@meta.data)
p01.cc.updated@meta.data<-arrange(p01.cc.updated@meta.data, cell.names)
rownames(p01.cc.updated@meta.data)<-as.character(p01.cc.updated$cell.names)
p01.counts[["cell.names"]]<-rownames(p01.counts@meta.data)
p01.counts@meta.data<-arrange(p01.counts@meta.data, cell.names)
rownames(p01.counts@meta.data)<-as.character(p01.counts$cell.names)
#Add HCI001 Meta Data to Counts Seurat Object
p01.counts[["mouse"]]<-p01.cc.updated$mouse
p01.counts[["burden"]]<-p01.cc.updated$burden
p01.counts[["tissue"]]<-p01.cc.updated$tissue
p01.counts[["paper.ident"]]<-p01.cc.updated$paper.ident
p01.counts[["pdx.surgery.type"]]<-p01.cc.updated$pdx.surgery.type
p01.counts[["pdx.surgical.side"]]<-p01.cc.updated$pdx.surgical.side
#Reorder HCI002 Meta Data
p02.updated[["cell.names"]]<-rownames(p02.updated@meta.data)
p02.updated@meta.data<-arrange(p02.updated@meta.data, cell.names)
rownames(p02.updated@meta.data)<-as.character(p02.updated$cell.names)
p02.counts[["cell.names"]]<-rownames(p02.counts@meta.data)
p02.counts@meta.data<-arrange(p02.counts@meta.data, cell.names)
rownames(p02.counts@meta.data)<-as.character(p02.counts$cell.names)
#Add HCI002 Meta Data to Counts Seurat Object
p02.counts[["mouse"]]<-p02.updated$mouse
p02.counts[["burden"]]<-p02.updated$burden
p02.counts[["tissue"]]<-p02.updated$tissue
p02.counts[["paper.ident"]]<-p02.updated$paper.ident
p02.counts[["pdx.surgery.type"]]<-p02.updated$pdx.surgery.type
p02.counts[["pdx.surgical.side"]]<-p02.updated$pdx.surgical.side
#Reorder HCI010 Meta Data
p10.updated[["cell.names"]]<-rownames(p10.updated@meta.data)
p10.updated@meta.data<-arrange(p10.updated@meta.data, cell.names)
rownames(p10.updated@meta.data)<-as.character(p10.updated$cell.names)
p10.counts[["cell.names"]]<-rownames(p10.counts@meta.data)
p10.counts@meta.data<-arrange(p10.counts@meta.data, cell.names)
rownames(p10.counts@meta.data)<-as.character(p10.counts$cell.names)
#Add HCI010 Meta Data to Counts Seurat Object
p10.counts[["mouse"]]<-p10.updated$mouse
p10.counts[["burden"]]<-p10.updated$burden
p10.counts[["tissue"]]<-p10.updated$tissue
p10.counts[["paper.ident"]]<-p10.updated$paper.ident
p10.counts[["pdx.surgery.type"]]<-p10.updated$pdx.surgery.type
p10.counts[["pdx.surgical.side"]]<-p10.updated$pdx.surgical.side
hci001.query <- p01.counts
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci001.anchors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hci001.query, dims = 1:30)
predictions <- TransferData(anchorset = hci001.anchors, refdata = norm.brca.integrated.epithelial$Coarse.Ident,
dims = 1:30)
hci001.query <- AddMetaData(hci001.query, metadata = predictions)
save(hci001.query, file = "/Users/paigehalas/Desktop/hci001.counts.label.transfer.Rda")
hci002.query <- p02.counts
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci002.anchors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hci002.query, dims = 1:30)
predictions <- TransferData(anchorset = hci002.anchors, refdata = norm.brca.integrated.epithelial$Coarse.Ident,
dims = 1:30)
hci002.query <- AddMetaData(hci002.query, metadata = predictions)
save(hci002.query, file = "/Users/paigehalas/Desktop/hci002.counts.label.transfer.Rda")
hci010.query <- p10.counts
DefaultAssay(norm.brca.integrated.epithelial) <- "integrated"
hci010.anchors <- FindTransferAnchors(reference = norm.brca.integrated.epithelial, query = hci010.query, dims = 1:30)
predictions <- TransferData(anchorset = hci010.anchors, refdata = norm.brca.integrated.epithelial$Coarse.Ident,
dims = 1:30)
hci010.query <- AddMetaData(hci010.query, metadata = predictions)
save(hci010.query, file = "/Users/paigehalas/Desktop/hci010.counts.label.transfer.Rda")
hci001.prediction.plot<-FetchData(hci001.query, c("tissue",
"paper.ident",
"predicted.id",
"cell.names",
"prediction.score.NORMAL.Basal",
"prediction.score.NORMAL.Luminal_1",
"prediction.score.NORMAL.Luminal_2",
"prediction.score.BRCA.Basal",
"prediction.score.BRCA.Luminal_1",
"prediction.score.BRCA.Luminal_2"))
levels(hci001.prediction.plot$tissue)<-c("Metastatic","Tumor")
hci001.prediction.plot.melted<-melt(hci001.prediction.plot)
library(reshape2)
hci001.prediction.plot.melted<-melt(hci001.prediction.plot)
hci001.prediction.heatmap.labels<-hci001.prediction.plot[,1:2]
colnames(hci001.prediction.heatmap.labels)<-c("Status","Paper ID")
colors<-brewer.pal(5, "Dark2")
library(RColorBrewer)
colors<-brewer.pal(5, "Dark2")
hci001.prediction.heatmap.colors<-list("Status" = c("Tumor"=colors[1],"Metastatic"=colors[2]),
"Paper ID" = c("A1"=colors[3],"A2"=colors[4],"A3"=colors[5]))
hci001.prediction.heatmap<-t(hci001.prediction.plot[,5:10])
rownames(hci001.prediction.heatmap)<-c("Normal Basal",
"Normal Luminal 1",
"Normal Luminal 2",
"BRCA Basal",
"BRCA Luminal 1",
"BRCA Luminal 2")
sort_hclust <- function(...) as.hclust(dendsort(as.dendrogram(...)))
mat_cluster_cols <- hclust(dist(t((as.matrix(hci001.prediction.heatmap)))))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
?dendsort
??dendsort
install.packages("dendstort")
install.packages("dendsort")
library(dendsort)
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- sort_hclust(hclust(dist(as.matrix(hci001.prediction.heatmap))))
pheatmap((as.matrix(hci001.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci001.prediction.heatmap.labels,
annotation_colors = hci001.prediction.heatmap.colors,
cutree_cols = 3)
install.packages("pheatmap")
library(pheatmap)
pheatmap((as.matrix(hci001.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci001.prediction.heatmap.labels,
annotation_colors = hci001.prediction.heatmap.colors,
cutree_cols = 3)
load(file = "/Users/paigehalas/Desktop/hci002.counts.label.transfer.Rda")
hci002.prediction.plot<-FetchData(hci002.query, c("tissue",
"paper.ident",
"predicted.id",
"cell.names",
"prediction.score.NORMAL.Basal",
"prediction.score.NORMAL.Luminal_1",
"prediction.score.NORMAL.Luminal_2",
"prediction.score.BRCA.Basal",
"prediction.score.BRCA.Luminal_1",
"prediction.score.BRCA.Luminal_2"))
levels(hci002.prediction.plot$tissue)<-c("Metastatic","Metastatic","Tumor")
hci002.prediction.plot.melted<-melt(hci002.prediction.plot)
hci002.prediction.heatmap.labels<-hci002.prediction.plot[,1:2]
colnames(hci002.prediction.heatmap.labels)<-c("Status","Paper ID")
colors<-brewer.pal(7, "Dark2")
hci002.prediction.heatmap.colors<-list("Status" = c("Tumor"=colors[1],"Metastatic"=colors[2]),
"Paper ID" = c("B1"=colors[3],"B2"=colors[4],"B3"=colors[5],"B4"=colors[6],"B5"=colors[7]))
hci002.prediction.heatmap<-t(hci002.prediction.plot[,5:10])
rownames(hci002.prediction.heatmap)<-c("Normal Basal",
"Normal Luminal 1",
"Normal Luminal 2",
"BRCA Basal",
"BRCA Luminal 1",
"BRCA Luminal 2")
sort_hclust <- function(...) as.hclust(dendsort(as.dendrogram(...)))
mat_cluster_cols <- hclust(dist(t((as.matrix(hci002.prediction.heatmap)))))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- sort_hclust(hclust(dist(as.matrix(hci002.prediction.heatmap))))
pheatmap((as.matrix(hci002.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci002.prediction.heatmap.labels,
annotation_colors = hci002.prediction.heatmap.colors,
cutree_cols = 5
pheatmap((as.matrix(hci002.prediction.heatmap)),
pheatmap((as.matrix(hci002.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci002.prediction.heatmap.labels,
annotation_colors = hci002.prediction.heatmap.colors,
cutree_cols = 5)
load(file = "/Users/paigehalas/Desktop/hci010.counts.label.transfer.Rda")
hci010.prediction.plot<-FetchData(hci010.query, c("tissue",
"paper.ident",
"predicted.id",
"cell.names",
"prediction.score.NORMAL.Basal",
"prediction.score.NORMAL.Luminal_1",
"prediction.score.NORMAL.Luminal_2",
"prediction.score.BRCA.Basal",
"prediction.score.BRCA.Luminal_1",
"prediction.score.BRCA.Luminal_2"))
levels(hci010.prediction.plot$tissue)<-c("Metastatic","Metastatic","Tumor")
hci010.prediction.plot.melted<-melt(hci010.prediction.plot)
#ggplot(hci010.prediction.plot.melted, aes(value, fill=tissue))+
#geom_histogram(binwidth = 0.01)+
#ggtitle("Prediction Score hci010")+
#theme_classic()+
#facet_wrap(~ variable)
hci010.prediction.heatmap.labels<-hci010.prediction.plot[,1:2]
colnames(hci010.prediction.heatmap.labels)<-c("Status","Paper ID")
colors<-brewer.pal(8, "Dark2")
hci010.prediction.heatmap.colors<-list("Status" = c("Tumor"=colors[1],"Metastatic"=colors[2]),
"Paper ID" = c("C1"=colors[3],"C2"=colors[4],"C3"=colors[5],"C4"=colors[6],"C5"=colors[7],"C6"=colors[8]))
hci010.prediction.heatmap<-t(hci010.prediction.plot[,5:10])
rownames(hci010.prediction.heatmap)<-c("Normal Basal",
"Normal Luminal 1",
"Normal Luminal 2",
"BRCA Basal",
"BRCA Luminal 1",
"BRCA Luminal 2")
sort_hclust <- function(...) as.hclust(dendsort(as.dendrogram(...)))
mat_cluster_cols <- hclust(dist(t((as.matrix(hci010.prediction.heatmap)))))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- sort_hclust(hclust(dist(as.matrix(hci010.prediction.heatmap))))
pheatmap((as.matrix(hci010.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci010.prediction.heatmap.labels,
annotation_colors = hci010.prediction.heatmap.colors,
cutree_cols = 5)
pheatmap((as.matrix(hci001.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci001.prediction.heatmap.labels,
annotation_colors = hci001.prediction.heatmap.colors,
cutree_cols = 3)
mat_cluster_cols <- hclust(dist(t((as.matrix(hci001.prediction.heatmap)))))
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_cols <- sort_hclust(mat_cluster_cols)
mat_cluster_rows <- sort_hclust(hclust(dist(as.matrix(hci001.prediction.heatmap))))
pheatmap((as.matrix(hci001.prediction.heatmap)),
scale = "column",
show_colnames = F,
cluster_cols = mat_cluster_cols,
cluster_rows = mat_cluster_rows,
color = PurpleAndYellow(50),
annotation_col = hci001.prediction.heatmap.labels,
annotation_colors = hci001.prediction.heatmap.colors,
cutree_cols = 3)
