#HCI001
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/ryan/Documents/pdx-norm-brca-integration-project/seurat-objects/norm_brca_integrated.RObj")
library(Seurat)
library(Seurat)
library(dplyr)
library(reshape2)
sessionInfo()
getwd()
setwd("/Users/ryan/pdx-norm-brca-integration-project")
load("seurat-objects/hci001.seurat3.object.Rda")
library(Seurat)
library(dplyr)
library(reshape2)
library(ggplot2)
library(patchwork)
load("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci002.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
load("~/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
readRDS("seurat-objects/hci001.seurat3.object.Rda")
source("seurat-objects/hci001.seurat3.object.Rda")
readRDS("seurat-objects/hci001.seurat3.object.Rda")
install.packages("readr")
load("seurat-objects/hci002.seurat3.object.Rda")
source("seurat-objects/hci002.seurat3.object.Rda")
library(readr)
readRDS("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
source("seurat-objects/hci002.seurat3.object.Rda")
read_rds("seurat-objects/hci002.seurat3.object.Rda")
install.packages("Seurat")
load("seurat-objects/hci001.seurat3.object.Rda")
library(Seurat)
install.packages("ggplot2")
library(ggplot2)
install.packages("scales")
install.packages("colorspace")
install.packages("Seurat")
library(Seurat)
load("seurat-objects/hci001.seurat3.object.Rda")
install.packages("C:/Users/Ryan/Downloads/caTools_1.18.0.tar.gz", repos = NULL, type = "source")
library(Seurat)
install.packages("Seurat")
library(Seurat)
Y
library(Seurat)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
library(Seurat)
load("seurat-objects/hci001.seurat3.object.Rda")
load("seurat-objects/hci002.seurat3.object.Rda")
load("seurat-objects/hci010.seurat3.object.Rda")
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
?FindIntegrationAnchors
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial)
sctransform.object.list <- list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.integrated.epithelial)
?SCTransform
for (i in 1:length(sctransform.object.list)) {
sctransform.object.list[[i]] <- SCTransform(sctransform.object.list[[i]], verbose = TRUE)
}
norm.brca.pdx.features.3000 <- SelectIntegrationFeatures(object.list = sctransform.object.list, nfeatures = 3000)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.features.3000 <- SelectIntegrationFeatures(object.list = sctransform.object.list,
nfeatures = 3000)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
options(future.globals.maxSize = (5000*1024^2))
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
options(future.globals.maxSize = (6000*1024^2))
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.anchors <- FindIntegrationAnchors(object.list = norm.brca.pdx.features.list.3000, normalization.method = "SCT",
anchor.features = norm.brca.pdx.features.3000, verbose = FALSE)
norm.brca.pdx.integrated <- IntegrateData(anchorset = norm.brca.pdx.anchors, normalization.method = "SCT",
verbose = FALSE)
#Now proceed with downstream analysis (i.e. visualization, clustering) on the integrated dataset. Commands are identical to the standard workflow, but do not run the ScaleData function after integration. You can see that after integration, cells group by their biological cell type (which has been pre-annotated), instead of by their underlying technology.
norm.brca.pdx.integrated <- RunPCA(norm.brca.pdx.integrated, verbose = FALSE)
norm.brca.pdx.integrated <- RunUMAP(norm.brca.pdx.integrated, dims = 1:30)
plots <- DimPlot(norm.brca.pdx.integrated, group.by = c("patient.id"))
plots & theme(legend.position = "top") & guides(color = guide_legend(nrow = 3, byrow = TRUE,
override.aes = list(size = 3)))
plots
save(norm.brca.pdx.integrated.3000features, file="seurat-objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
save(norm.brca.pdx.integrated, file="seurat-objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
save(norm.brca.pdx.integrated, file="E:/Scripts/Seurat/Seurat3_Objects/norm.brca.pdx.integrated.sctransform.3000features.SeuratObject.Rda")
combined_status <- list ()
#Adding the five different classifications to the list
combined_status[grep("NORMAL",norm.brca.pdx.integrated$Status)] <- "Normal"
combined_status[grep("BRCA",norm.brca.pdx.integrated$Status)] <- "BRCA"
combined_status[grep("HCI001",norm.brca.pdx.integrated$patient.id)] <- "HCI001"
combined_status[grep("HCI002",norm.brca.pdx.integrated$patient.id)] <- "HCI002"
combined_status[grep("HCI010",norm.brca.pdx.integrated$patient.id)] <- "HCI010"
#Add new metadata column
norm.brca.pdx.integrated[["combined_status"]] <- as.character(combined_status)
Combined_Cell_Type <- list()
#Get the lung and lymph cells from the PDX models that are metastatic
Combined_Cell_Type[grep("Lung", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
Combined_Cell_Type[grep("Lymph", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
#Get the tumor cells from the PDX models that are tumor cells
Combined_Cell_Type[grep("Tumor", norm.brca.pdx.integrated$tissue)] <- "Tumor"
#Get the cell types from Kevins Norm/BRCA dataset
Combined_Cell_Type[grep("Basal", norm.brca.pdx.integrated$Cell.Type)] <- "Basal"
Combined_Cell_Type[grep("Luminal_1", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_1"
Combined_Cell_Type[grep("Luminal_2", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_2"
Combined_Cell_Type[grep("Unclassified", norm.brca.pdx.integrated$Cell.Type)] <- "Unclassified"
#Add new column
norm.brca.pdx.integrated[["Combined_Cell_Type"]] <- as.character(Combined_Cell_Type)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type")
DimPlot(norm.brca.pdx.integrated, group.by = "Combined_Cell_Type",split.by = "combined_status")
?DimPlot
DimPlot(norm.brca.pdx.integrated, group.by = "Combined_Cell_Type",split.by = "combined_status", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 1)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 0.25)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2, pt.size = 0.5)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status", ncol = 2, pt.size = 0.5)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status", ncol = 1, pt.size = 0.5)
#HCI001
load("seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
unique(norm.brca.integrated.epithelial@meta.data$individual)
DefaultAssay(norm.brca.integrated.epithelial)<-"RNA"
norm.brca.integrated.epihelial.patients<-SplitObject(norm.brca.integrated.epithelial,"individual")
DefaultAssay(p01.cc.updated)<-"expected.counts"
DefaultAssay(p02.updated)<-"expected.counts"
DefaultAssay(p10.updated)<-"expected.counts"
DefaultAssay(norm.brca.integrated.epithelial)<-"RNA"
DefaultAssay(p01.cc.updated)<-"expected.counts"
DefaultAssay(p02.updated)<-"expected.counts"
DefaultAssay(p10.updated)<-"expected.counts"
sctransform.object.list <- SplitObject(norm.brca.integrated.epithelial,"individual")
sctransform.object.list[1]
sctransform.object.list[7]<-p01.cc.updated
norm.brca.epithelial.patients <- SplitObject(norm.brca.integrated.epithelial,"individual")
norm.brca.ind1<-norm.brca.epithelial.patients$ind1
norm.brca.ind10<-norm.brca.epithelial.patients$ind10
norm.brca.ind2<-norm.brca.epithelial.patients$ind2
norm.brca.ind3<-norm.brca.epithelial.patients$ind3
norm.brca.ind4<-norm.brca.epithelial.patients$ind4
sctransform.object.list<-list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"ind1"=norm.brca.ind1,"ind10"=norm.brca.ind10, "ind2"=norm.brca.ind2,"ind3"=norm.brca.ind3,"ind4"=norm.brca.ind4,"ind9"=norm.brca.ind9)
norm.brca.ind9<-norm.brca.epithelial.patients$ind9
sctransform.object.list<-list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"ind1"=norm.brca.ind1,"ind10"=norm.brca.ind10, "ind2"=norm.brca.ind2,"ind3"=norm.brca.ind3,"ind4"=norm.brca.ind4,"ind9"=norm.brca.ind9)
#Conceptually, this workflow is very similar to what we have previously introduced, where we ‘correct’ (or harmonize) log-normalized expression values across datasets. Here, instead, we will harmonize the Pearson residuals that are output from SCTransform.
#First, setup the Seurat object list, and run SCTransform on each object separately
for (i in 1:length(sctransform.object.list)) {
sctransform.object.list[[i]] <- SCTransform(sctransform.object.list[[i]], verbose = FALSE)
}
?SCTransform
norm.brca.pdx.features.3000 <- SelectIntegrationFeatures(object.list = sctransform.object.list,
nfeatures = 3000)
options(future.globals.maxSize = (6000*1024^2))
norm.brca.pdx.features.list.3000 <- PrepSCTIntegration(object.list = sctransform.object.list,
anchor.features = norm.brca.pdx.features.3000,
verbose = FALSE)
norm.brca.pdx.anchors <- FindIntegrationAnchors(object.list = norm.brca.pdx.features.list.3000, normalization.method = "SCT",
anchor.features = norm.brca.pdx.features.3000, verbose = FALSE)
norm.brca.pdx.integrated <- IntegrateData(anchorset = norm.brca.pdx.anchors, normalization.method = "SCT",
verbose = FALSE)
#Now proceed with downstream analysis (i.e. visualization, clustering) on the integrated dataset. Commands are identical to the standard workflow, but do not run the ScaleData function after integration. You can see that after integration, cells group by their biological cell type (which has been pre-annotated), instead of by their underlying technology.
norm.brca.pdx.integrated <- RunPCA(norm.brca.pdx.integrated, verbose = FALSE)
norm.brca.pdx.integrated <- RunUMAP(norm.brca.pdx.integrated, dims = 1:30)
#Generate new list for the dataset type
combined_status <- list ()
#Adding the five different classifications to the list
combined_status[grep("NORMAL",norm.brca.pdx.integrated$Status)] <- "Normal"
combined_status[grep("BRCA",norm.brca.pdx.integrated$Status)] <- "BRCA"
combined_status[grep("HCI001",norm.brca.pdx.integrated$patient.id)] <- "HCI001"
combined_status[grep("HCI002",norm.brca.pdx.integrated$patient.id)] <- "HCI002"
combined_status[grep("HCI010",norm.brca.pdx.integrated$patient.id)] <- "HCI010"
#Add new metadata column
norm.brca.pdx.integrated[["combined_status"]] <- as.character(combined_status)
#Generate new list for the cell type
Combined_Cell_Type <- list()
#Get the lung and lymph cells from the PDX models that are metastatic
Combined_Cell_Type[grep("Lung", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
Combined_Cell_Type[grep("Lymph", norm.brca.pdx.integrated$tissue)] <- "Metastatic"
#Get the tumor cells from the PDX models that are tumor cells
Combined_Cell_Type[grep("Tumor", norm.brca.pdx.integrated$tissue)] <- "Tumor"
#Get the cell types from Kevins Norm/BRCA dataset
Combined_Cell_Type[grep("Basal", norm.brca.pdx.integrated$Cell.Type)] <- "Basal"
Combined_Cell_Type[grep("Luminal_1", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_1"
Combined_Cell_Type[grep("Luminal_2", norm.brca.pdx.integrated$Cell.Type)] <- "Luminal_2"
Combined_Cell_Type[grep("Unclassified", norm.brca.pdx.integrated$Cell.Type)] <- "Unclassified"
#Add new column
norm.brca.pdx.integrated[["Combined_Cell_Type"]] <- as.character(Combined_Cell_Type)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",pt.size = 0.5)
DimPlot(norm.brca.pdx.integrated, group.by = "combined_status",split.by = "Combined_Cell_Type", ncol = 2,pt.size = 0.5)
FeaturePlot(norm.brca.pdx.integrated,c("KRT5","KRT18","ANKRD30A","SLPI"))
?FeaturePlot
grep("HCI001",colnames(norm.brca.pdx.integrated@assays$RNA))
colSums(norm.brca.pdx.integrated@assays$RNA[,1])
save(norm.brca.pdx.integrated, file="E:/Scripts/Seurat/Seurat3_Objects/norm.brca.pdx.expectedcounts.integrated.sctransform.3000features.SeuratObject.Rda")
FeaturePlot(norm.brca.pdx.integrated,c("KRT5","KRT8","ANKRD30A","SLPI"))
grep("HCI",colnames(norm.brca.pdx.integrated@assays$RNA))
length(grep("HCI",colnames(norm.brca.pdx.integrated@assays$RNA)))
norm.brca.pdx.integrated@assays$RNA[,grep("HCI",colnames(norm.brca.pdx.integrated@assays$RNA))]<-norm.brca.pdx.integrated@assays$expected.counts[,grep("HCI",colnames(norm.brca.pdx.integrated@assays$expected.counts))]
old.rna.data<-GetAssayData(norm.brca.pdx.integrated[["RNA"]],slot = "counts")
old.expected.count.data<-GetAssayData(norm.brca.pdx.integrated[["expected.counts"]],slot = "counts")
old.rna.data<-as.matrix(x=old.rna.data)
old.rna.data<-as.matrix(x=old.rna.data)
old.expected.count.data<-as.matrix(x=old.expected.count.data)
new.rna.data<-old.rna.data
new.rna.data[,grep("HCI",colnames(new.rna.data))]<-old.expected.count.data[,grep("HCI",colnames(old.expected.count.data))]
dim(old.rna.data)
dim(old.expected.count.data)
new.rna.data[,grep("HCI",colnames(new.rna.data))]<-old.expected.count.data[which(rownames(old.expected.count.data)%in%rownames(new.rna.data)),grep("HCI",colnames(old.expected.count.data))]
length(which(rownames(old.expected.count.data)%in%rownames(new.rna.data)))
new.rna.data[which(rownames(new.rna.data)%in%rownames(old.expected.count.data)),grep("HCI",colnames(new.rna.data))]<-old.expected.count.data[which(rownames(old.expected.count.data)%in%rownames(new.rna.data)),grep("HCI",colnames(old.expected.count.data))]
dim(new.rna.data)
norm.brca.pdx.integrated<-SetAssayData(object=norm.brca.pdx.integrated,
slot = "counts",
new.data = new.rna.data,
assay = "corrected.rna")
norm.brca.pdx.integrated[["corrected.rna"]]<-CreateAssayObject(counts = new.rna.data)
DefaultAssay(norm.brca.pdx.integrated)<-"corrected.rna"
FeaturePlot(norm.brca.pdx.integrated,c("KRT5","KRT8","ANKRD30A","SLPI"))
DefaultAssay(norm.brca.pdx.integrated)<-"integrated"
FeaturePlot(norm.brca.pdx.integrated,c("KRT5","KRT8","ANKRD30A","SLPI"))
norm.brca.pdx.integrated<-NormalizeData(
norm.brca.pdx.integrated,
assay = "corrected.rna")
DefaultAssay(norm.brca.pdx.integrated)<-"corrected.rna"
FeaturePlot(norm.brca.pdx.integrated,c("KRT5","KRT8","ANKRD30A","SLPI"))
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI"))
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))+facet_wrap(~Combined_Cell_Type)
library(Seurat)
library(dplyr)
library(reshape2)
library(ggplot2)
library(patchwork)
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))+facet_wrap(~Combined_Cell_Type)
?facet_wrap
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))+facet_wrap(vars(Combined_Cell_Type))
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))+facetwrap(Combined_Cell_Type)
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))+FacetWrap(Combined_Cell_Type)
?FacetWrap
FeaturePlot(norm.brca.pdx.integrated,c("KRT14","KRT18","ANKRD30A","SLPI","PHLDA2","BHLHE40"))
VlnPlot(norm.brca.pdx.integrated,c("PHLDA2","BHLHE40"),split.by = "Combined_Cell_Type")
VlnPlot(norm.brca.pdx.integrated,c("PHLDA2","BHLHE40"),group.by = "Combined_Cell_Type")
getAnywhere(SCTransform)
