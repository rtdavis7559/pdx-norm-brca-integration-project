print(wilcox.test(metabolism.volcano.matrix.brca.luminal1[,i],metabolism.volcano.matrix.normal.luminal1[,i]))
}
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
print(colnames(metabolism.volcano.matrix.brca.luminal2)[i])
print(colnames(metabolism.volcano.matrix.normal.luminal2)[i])
print(wilcox.test(metabolism.volcano.matrix.brca.luminal2[,i],metabolism.volcano.matrix.normal.luminal2[,i]))
}
View(metabolism.volcano.matrix.normal.basal)
View(metabolism.volcano.matrix.normal.luminal2)
View(metabolsim.volcano.matrix.brca)
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.luminal2[,i],metabolism.volcano.matrix.normal.luminal2[,i])
}
hold
hold$p.value
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.luminal2[,i],metabolism.volcano.matrix.normal.luminal2[,i])
hold.pval<-hold$p.value
}
hold.pval
luminal2.wilcox.pval<-list()
luminal2.wilcox.pval<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.luminal2[,i],metabolism.volcano.matrix.normal.luminal2[,i])
luminal2.wilcox.pval[i-2]<-hold$p.value
}
luminal2.wilcox.pval
basal.wilcox.pval<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.basal)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.basal[,i],metabolism.volcano.matrix.normal.basal[,i])
basal.wilcox.pval[i-2]<-hold$p.value
}
luminal1.wilcox.pval<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal1)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.luminal1[,i],metabolism.volcano.matrix.normal.luminal1[,i])
luminal1.wilcox.pval[i-2]<-hold$p.value
}
luminal2.wilcox.pval<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
hold<-wilcox.test(metabolism.volcano.matrix.brca.luminal2[,i],metabolism.volcano.matrix.normal.luminal2[,i])
luminal2.wilcox.pval[i-2]<-hold$p.value
}
basal.avg.diff<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.basal)){
basal.avg.diff[i-2]<-mean(metabolism.volcano.matrix.brca.basal[,i])-mean(metabolism.volcano.matrix.normal.basal[,i])
}
basal.avg.diff
luminal1.avg.diff<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal1)){
luminal1.avg.diff[i-2]<-mean(metabolism.volcano.matrix.brca.luminal1[,i])-mean(metabolism.volcano.matrix.normal.luminal1[,i])
}
luminal2.avg.diff<-list()
for (i in 3:ncol(metabolism.volcano.matrix.brca.luminal2)){
luminal2.avg.diff[i-2]<-mean(metabolism.volcano.matrix.brca.luminal2[,i])-mean(metabolism.volcano.matrix.normal.luminal2[,i])
}
basal.avg.diff
as.numeric(basal.avg.diff)
volcano.plot.basal.matrix<-data.frame("pathway"=colnames(metabolism.volcano.matrix.brca.basal)[3:ncol(metabolism.volcano.matrix.brca.basal)],
"avg.diff"=as.numeric(basal.avg.diff),
"pval"=as.numeric(basal.wilcox.pval))
volcano.plot.basal.matrix
mutate(volcano.plot.basal.matrix, direction = ifelse(volcano.plot.basal.matrix$avg.diff > 0, "BRCA", "Normal"))
volcano.plot.basal.matrix
mutate(volcano.plot.basal.matrix, "direction" = ifelse(volcano.plot.basal.matrix$avg.diff > 0, "BRCA", "Normal"))
volcano.plot.basal.matrix<- mutate(volcano.plot.basal.matrix, "direction" = ifelse(volcano.plot.basal.matrix$avg.diff > 0, "BRCA", "Normal"))
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_point(stat = "identity")
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_dotplot(stat = "identity")
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_dotplot(stat = "identity")
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_dotplot()
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_point()
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_jitter()
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
fill = direction))+
geom_jitter()+
theme_classic()
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
color = direction))+
geom_jitter()+
theme_classic()
metabolism.volcano.matrix.by.cell<- cbind(Norm.BRCA@meta.data$Cell.Type, Norm.BRCA@meta.data$Status, Norm.BRCA@meta.data$chemistry, Norm.BRCA@meta.data[,33:69])
metabolism.volcano.matrix.melt.by.cell<-melt(metabolism.volcano.matrix.by.cell)
colnames(metabolism.volcano.matrix.melt.by.cell)<-c("cell.type","status","chemistry","pathway","score")
head(metabolism.volcano.matrix.melt.by.cell)
metabolism.volcano.matrix.by.cell<- cbind(Norm.BRCA@meta.data$Cell.Type, Norm.BRCA@meta.data$Status, Norm.BRCA@meta.data[,33:69])
metabolism.volcano.matrix.melt.by.cell<-melt(metabolism.volcano.matrix.by.cell)
colnames(metabolism.volcano.matrix.melt.by.cell)<-c("cell.type","status","pathway","score")
#Remove Unclassified Cells
metabolism.volcano.matrix.melt.by.cell<-subset(metabolism.volcano.matrix.melt.by.cell,cell.type!="Unclassified")
head(metabolism.volcano.matrix.melt.by.cell)
metabolism.volcano.matrix.melt.brca.by.cell<-subset(metabolism.volcano.matrix.melt.by.cell,status!="NORMAL")
metabolism.volcano.matrix.melt.normal.by.cell<-subset(metabolism.volcano.matrix.melt.by.cell,status!="BRCA")
metabolism.volcano.matrix.brca.by.cell<-dcast(metabolism.volcano.matrix.melt.brca.by.cell, cell.type~pathway)
metabolism.volcano.matrix.brca.by.cell
metabolism.volcano.matrix.brca.average.by.cell<-dcast(metabolism.volcano.matrix.melt.brca.by.cell, cell.type~pathway,mean)
head(metabolism.volcano.matrix.brca.average.by.cell)
metabolism.volcano.matrix.melt.normal.by.cell<-subset(metabolism.volcano.matrix.melt.by.cell,status!="BRCA")
metabolism.volcano.matrix.normal.average.by.cell<-dcast(metabolism.volcano.matrix.melt.normal.by.cell, cell.type~pathway,mean)
basal.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[1,i]-metabolism.volcano.matrix.normal.average.by.cell[1,i]
}
basal.avg.diff.by.cell
luminal1.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[2,i]-metabolism.volcano.matrix.normal.average.by.cell[2,i]
}
luminal2.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[3,i]-metabolism.volcano.matrix.normal.average.by.cell[3,i]
}
head(metabolism.volcano.matrix.melt.brca.by.cell)
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[1]
metabolism.volcano.matrix.melt.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.by.cell$pathway)]
pathway
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[2]
metabolism.volcano.matrix.melt.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.by.cell$pathway)]
metabolism.volcano.matrix.melt.brca.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.by.cell$pathway)]
basal.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.by.cell$pathway)])
basal.wilcox.pval.by.cell[i-2]<-hold$p.value
}
metabolism.volcano.matrix.melt.brca.basal.by.cell<-subset(metabolism.volcano.matrix.melt.brca.by.cell,cell.type!="Basal")
metabolism.volcano.matrix.melt.normal.basal.by.cell<-subset(metabolism.volcano.matrix.melt.normal.by.cell,cell.type!="Basal")
metabolism.volcano.matrix.melt.brca.luminal1.by.cell<-subset(metabolism.volcano.matrix.melt.brca.by.cell,cell.type!="Luminal_1")
metabolism.volcano.matrix.melt.brca.basal.by.cell<-subset(metabolism.volcano.matrix.melt.brca.by.cell,cell.type=="Basal")
metabolism.volcano.matrix.melt.normal.basal.by.cell<-subset(metabolism.volcano.matrix.melt.normal.by.cell,cell.type=="Basal")
metabolism.volcano.matrix.melt.brca.luminal1.by.cell<-subset(metabolism.volcano.matrix.melt.brca.by.cell,cell.type=="Luminal_1")
metabolism.volcano.matrix.melt.normal.luminal1.by.cell<-subset(metabolism.volcano.matrix.melt.normal.by.cell,cell.type=="Luminal_1")
metabolism.volcano.matrix.melt.normal.luminal2.by.cell<-subset(metabolism.volcano.matrix.melt.normal.by.cell,cell.type=="Luminal_2")
metabolism.volcano.matrix.melt.brca.luminal2.by.cell<-subset(metabolism.volcano.matrix.melt.brca.by.cell,cell.type=="Luminal_2")
metabolism.volcano.matrix.melt.normal.luminal2.by.cell<-subset(metabolism.volcano.matrix.melt.normal.by.cell,cell.type=="Luminal_2")
basal.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.basal.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.basal.by.cell$pathway)])
basal.wilcox.pval.by.cell[i-2]<-hold$p.value
}
luminal1.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.luminal1.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.luminal1.by.cell$pathway)])
luminal1.wilcox.pval.by.cell[i-2]<-hold$p.value
}
head(basal.wilcox.pval.by.cell)
head(luminal1.wilcox.pval.by.cell)
luminal2.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.luminal2.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.luminal2.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.luminal2.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.luminal2.by.cell$pathway)])
luminal2.wilcox.pval.by.cell[i-2]<-hold$p.value
}
basal.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[1,i]-metabolism.volcano.matrix.normal.average.by.cell[1,i]
}
luminal1.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[2,i]-metabolism.volcano.matrix.normal.average.by.cell[2,i]
}
luminal2.avg.diff.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
basal.avg.diff.by.cell[i-1]<-metabolism.volcano.matrix.brca.average.by.cell[3,i]-metabolism.volcano.matrix.normal.average.by.cell[3,i]
}
volcano.plot.basal.matrix.by.cell<-data.frame("pathway"=colnames(metabolism.volcano.matrix.brca.average.by.cell)[3:ncol(metabolism.volcano.matrix.brca.average.by.cell)],
"avg.diff"=as.numeric(basal.avg.diff.by.cell),
"pval"=as.numeric(basal.wilcox.pval.by.cell))
length(basal.avg.diff.by.cell)
basal.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.basal.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.basal.by.cell$pathway)])
basal.wilcox.pval.by.cell[i-1]<-hold$p.value
}
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.basal.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.basal.by.cell$pathway)])
basal.wilcox.pval.by.cell[i-1]<-hold$p.value
}
luminal1.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.luminal1.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.luminal1.by.cell$pathway)])
luminal1.wilcox.pval.by.cell[i-1]<-hold$p.value
}
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.basal.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.basal.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.basal.by.cell$pathway)])
basal.wilcox.pval.by.cell[i-1]<-hold$p.value
}
luminal1.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.luminal1.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.luminal1.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.luminal1.by.cell$pathway)])
luminal1.wilcox.pval.by.cell[i-1]<-hold$p.value
}
luminal2.wilcox.pval.by.cell<-list()
for (i in 2:ncol(metabolism.volcano.matrix.brca.average.by.cell)){
pathway<-colnames(metabolism.volcano.matrix.brca.average.by.cell)[i]
hold<-wilcox.test(metabolism.volcano.matrix.melt.brca.luminal2.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.brca.luminal2.by.cell$pathway)],
metabolism.volcano.matrix.melt.normal.luminal2.by.cell$score[grep(pathway,metabolism.volcano.matrix.melt.normal.luminal2.by.cell$pathway)])
luminal2.wilcox.pval.by.cell[i-1]<-hold$p.value
}
?log
volcano.plot.basal.matrix.by.cell<-data.frame("pathway"=colnames(metabolism.volcano.matrix.brca.average.by.cell)[3:ncol(metabolism.volcano.matrix.brca.average.by.cell)],
"avg.diff"=as.numeric(basal.avg.diff.by.cell),
"pval"=log10(as.numeric(basal.wilcox.pval.by.cell)))
length(basal.wilcox.pval.by.cell)
length(basal.avg.diff.by.cell)
length(colnames(metabolism.volcano.matrix.brca.average.by.cell)[3:ncol(metabolism.volcano.matrix.brca.average.by.cell)])
volcano.plot.basal.matrix.by.cell<-data.frame("pathway"=colnames(metabolism.volcano.matrix.brca.average.by.cell)[2:ncol(metabolism.volcano.matrix.brca.average.by.cell)],
"avg.diff"=as.numeric(basal.avg.diff.by.cell),
"pval"=log10(as.numeric(basal.wilcox.pval.by.cell)))
volcano.plot.basal.matrix.by.cell
volcano.plot.basal.matrix.by.cell<- mutate(volcano.plot.basal.matrix.by.cell, "direction" = ifelse(volcano.plot.basal.matrix$avg.diff > 0, "BRCA", "Normal"))
ggplot(volcano.plot.basal.matrix, aes(x = avg.diff,
y = pval,
color = direction))+
geom_jitter()+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_jitter()+
theme_classic()
volcano.plot.basal.matrix.by.cell<-data.frame("pathway"=colnames(metabolism.volcano.matrix.brca.average.by.cell)[2:ncol(metabolism.volcano.matrix.brca.average.by.cell)],
"avg.diff"=as.numeric(basal.avg.diff.by.cell),
"pval"=-log10(as.numeric(basal.wilcox.pval.by.cell)))
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
theme_classic()
volcano.plot.basal.matrix.by.cell<- mutate(volcano.plot.basal.matrix.by.cell, "direction" = ifelse(volcano.plot.basal.matrix$avg.diff > 0, "BRCA", "Normal"))
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
theme_classic()
volcano.plot.basal.matrix.by.cell<- mutate(volcano.plot.basal.matrix.by.cell, "direction" = ifelse(volcano.plot.basal.matrix.by.cell$avg.diff > 0, "BRCA", "Normal"))
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label(~pathway)
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label(pathway)
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label(aes(pathway))
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label(aes(~pathway))
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label(mapping = pathway)+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction,
mapping = pathway))+
geom_point()+
geom_label()+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction,
mapping = pathway))+
geom_point()+
geom_label(label=pathway)+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction,))+
geom_point()+
geom_label(label=pathway)+
theme_classic()
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_text(label=pathway)+
theme_classic()
volcano.plot.basal.matrix.by.cell
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label_repel(aes(label = pathway),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50')+
theme_classic()
library(ggrepel)
ggplot(volcano.plot.basal.matrix.by.cell, aes(x = avg.diff,
y = pval,
color = direction))+
geom_point()+
geom_label_repel(aes(label = pathway),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50')+
theme_classic()
UMAP.integrated.data <- readRDS("/Users/paigehalas/Desktop/UMAP.integrated.data.rds")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelia.individual.1.object <- norm.brca.epithelial.individual.object$ind1
norm.brca.epithelia.individual.2.object <- norm.brca.epithelial.individual.object$ind2
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
colnames(norm.brca.epithelial.object@meta.data)
head(norm.brca.epithelial.object$Compartment)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
## Data Integration - Standard Workflow
DefaultAssay(p01.counts) <- "RNA"
DefaultAssay(p02.counts) <- "RNA"
DefaultAssay(p10.counts) <- "RNA"
DefaultAssay(norm.brca.integrated.epithelial) <- "RNA"
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
?SplitObject
norm.brca.epithelial.object$individual
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
library(dplyr)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.object<-SplitObject(norm.brca.epithelial.object,"individual")
DefaultAssay(norm.brca.epithelial.object)
norm.brca.epithelial.object@assays$integrated
norm.brca.epithelial.object
norm.brca.epithelial.object@meta.data$individual
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
library(Seurat)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.expected.counts.trimmed.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.expected.counts.trimmed.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.expected.counts.trimmed.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
rm(norm.brca.subset.objects)
rm(norm.brca.stromal.object)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
rm(norm.brca.integrated.epithelial)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.epithelial.individual.objects<-SplitObject(norm.brca.epithelial.object,"individual")
