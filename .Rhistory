#import in the txt lists of genes
Glycolysis <- read.table("gene_lists/glycolysis.txt")
#convert to characters
glycolysis <- list("Glycolysis" = Glycolysis$V1)
alanine.aspartate <- read.table("gene_lists/alanine.aspartate.glutamate.txt")
alanine.aspartate <- list("Alanine.Aspartate" = alanine.aspartate$V1)
aminoacyl.tRNA.biosynthesis <- read.table("gene_lists/aminoacyl.tRNA.biosynthesis.txt")
aminoacyl.tRNA.biosynthesis <- list("Aminoacyl.tRNA.Biosynthesis" = aminoacyl.tRNA.biosynthesis$V1)
arachondic.acid <- read.table("gene_lists/arachondic.acid.txt")
arachadonic.acid <- read.table("gene_lists/arachadonic.acid.txt")
arachadonic.acid <- list("Arachadondic.Acid" = arachadonic.acid$V1)
arginine.proline <- read.table("gene_lists/arginine.proline.txt")
arginine.proline <- list("Arginine.Proline" = arginine.proline$V1)
ascorbate.aldarate <- read.table("gene_lists/ascorbate.aldarate.txt")
ascorbate.aldarate <- list("Ascorbate.Aldarate" = ascorbate.aldarate$V1)
butanoate <- read.table("gene_lists/butanoate.txt")
butanoate <- list("Butanoate" = butanoate$V1)
arachadonic.acid <- read.table("gene_lists/arachadonic.acid.txt")
arachadonic.acid <- list("arachadondic.acid" = arachadonic.acid$V1)
arginine.proline <- read.table("gene_lists/arginine.proline.txt")
arginine.proline <- list("arginine.proline" = arginine.proline$V1)
ascorbate.aldarate <- read.table("gene_lists/ascorbate.aldarate.txt")
ascorbate.aldarate <- list("ascorbate.aldarate" = ascorbate.aldarate$V1)
butanoate <- read.table("gene_lists/butanoate.txt")
butanoate <- list("butanoate" = butanoate$V1)
citrica.acid <- read.table("gene_lists/citric.acid.txt")
citric.acid <- list("citric.acid" = citric.acid$V1)
citric.acid <- read.table("gene_lists/citric.acid.txt")
citric.acid <- list("citric.acid" = citric.acid$V1)
View(alanine.aspartate)
View(glycolysis)
cysteine.methionine <- read.table("gene_lists/cysteine.methionine.txt")
cysteine.methionine <- list("cysteine.methionine" = cysteine.methionine$V1)
ester.lipid <- read.table("gene_lists/ester.lipid.metabolism.txt")
ester.lipid <- list("ester.lipid" = ester.lipid$V1)
fatty.acid <- read.table("gene_lists/fatty.acid.txt")
fatty.acid <- list("fatty.acid" = fatty.acid$V1)
fructose.mannose <- read.table("gene_lists/fructose.mannose.txt")
fructose.mannose <- list("fructose.mannose" = fructose.mannose$V1)
galactose.metabolism <- read.table("gene_lists/galactose.metabolism.txt")
galactose.metabolism <- list("galactose.metabolism" = galactose.metabolism$V1)
galactose.metabolism <- read.table("gene_lists/galactose.metabolism.txt")
galactose <- list("galactose.metabolism" = galactose.metabolism$V1)
galactose <- read.table("gene_lists/galactose.metabolism.txt")
galactose <- list("galactose" = galactose$V1)
glutathione <- read.table("gene_lists/glutathione.metabolism.txt")
glutathione <- list("glutathione" = glutathione$V1)
glycerolipid <- read.table("gene_lists/glycerolipid.metabolism.txt")
glycerolipid <- list("glycerolipid" = glycerolipid$V1)
glycerophospholipid <- read.table("gene_lists/glycerophospholipid.txt")
glycerophospholipid <- list("glycerophospholipid" = glycerophospholipid$V1)
glycine.serine.threonine <- read.table("gene_lists/glycine.serine.threonine.txt")
glycine.serine.threonine <- list("glycine.serine.threonine" = glycine.serine.threonine$V1)
glycosaminoglycan.biosynthesis.chondroitin<- read.table("/gene_lists/glycosaminoglycan.biosynthesis.chondroitin.txt")
glycosaminoglycan.biosynthesis.chondroitin<- read.table("gene_lists/glycosaminoglycan.biosynthesis.chondroitin.txt")
glycosaminoglycan.biosynthesis.chondroitin <- list("glycosaminoglycan.biosynthesis.chondroitin" = glycosaminoglycan.biosynthesis.chondroitin$V1)
glycosaminoglycan.biosynthesis.heparan <- read.table("gene_lists/glycosaminoglycan.biosynthesis.heparan.txt")
glycosaminoglycan.biosynthesis.heparan <- list("glycosaminoglycan.biosynthesis.heparan" = glycosaminoglycan.biosynthesis.heparan$V1)
glycosaminoglycan.biosynthesis.keratin <- read.table("gene_lists/glycosaminoglycan.biosynthesis.keratin.txt")
glycosaminoglycan.biosynthesis.keratin <- list("glycosaminoglycan.biosynthesis.keratin", glycosaminoglycan.biosynthesis.keratin$V1)
glyoxylate.dicarboxylate <- read.table("gene_lists/glyoxylate.dicarboxylate.txt")
glyoxylate.dicarboxylate <- list("glyoxylate.dicarboxylate", glyoxylate.dicarboxylate$V1)
glycosaminoglycan.biosynthesis.keratin <- list("glycosaminoglycan.biosynthesis.keratin" = glycosaminoglycan.biosynthesis.keratin$V1)
glyoxylate.dicarboxylate <- read.table("gene_lists/glyoxylate.dicarboxylate.txt")
glyoxylate.dicarboxylate <- list("glyoxylate.dicarboxylate"= glyoxylate.dicarboxylate$V1)
histidine <- read.table("gene_lists/histidine")
histidine <- list("histidine" = histidine$V1)
histidine <- read.table("gene_lists/histidine.txt")
histidine <- list("histidine" = histidine$V1)
linoleic.acid <- read.table("gene_lists/linoleic.acid.txt")
linoleic.acid <- list("linoleic.acid" = linoleic.acid$V1)
lysine.degredation <- read.table("gene_lists/lysine.degradation.txt")
lysine.degredation <- list("lysine.degredation" = lysine.degredation$V1)
pentose.phos <- read.table("gene_lists/pentose.phos.txt")
pentose.phos <- list("pentose.phos" = pentose.phos$V1)
phenylalanine <- read.table("gene_lists/phenylalanine.txt")
phenylalanine <- list("phenylalanine" = phenylalanine$V1)
propanoate.metabolism <- read.table("gene_lists/propanoate.metabolism.txt")
propanoate.metabolism <- list("propanoate.metabolism" = propanoate.metabolism$V1)
propanoate <- read.table("gene_lists/propanoate.metabolism.txt")
propanoate<- list("propanoate" = propanoate$V1)
purine <- read.table("gene_lists/purine.metabolism.txt")
purine <- list("purine" = purine$V1)
pyrimidine <- read.table("gene_lists/pyrimidine.metabolism.txt")
pyrimidine <- list("pyrimidine" = pyrimidine$V1)
pyruvate <- read.table("gene_lists/pyruvate.metabolism.txt")
pyruvate <- list ("pyruvate" = pyruvate$V1)
sphingolipid <- read.table("gene_lists/sphingolipid.metabolism.txt")
sphingolipid <- list("sphingolipid" = sphingolipid$V1)
starch.sucrose <- read.table("gene_lists/starch.sucrose.txt")
starch.sucrose <- list("starch.sucrose" = starch.sucrose$V1)
taurine.hypotaurine <- read.table("gene_lists/taurine.hypotaurine.txt")
taurine.hypotaurine <- list("taurine.hypotaurine" = taurine.hypotaurine$V1)
tyrosine <- list("tyrosine"= tyrosine$V1)
tyrosine <- read.table("gene_lists/tyrosine.txt")
tyrosine <- list("tyrosine"= tyrosine$V1)
valine.leucine.isoleucine <- read.table("gene_lists/valine.leucine.isoleucine")
valine.leucine.isoleucine <- read.table("gene_lists/valine.leucine.isoleucine.txt")
valine.leucine.isoleucine <- list("valine.leucine.isoleucine" = valine.leucine.isoleucine$V1)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"OXPHOS_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate
)
View(metabolism.pathways)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate, "Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis, "Arachadonic_Acid_Score" = arachadonic.acid, "Arginine_Proline_Score" = arginine.proline, "Ascorbate_Aldarate_Score" = ascorbate.aldarate, "Butanoate_Score"= butanoate, "Citric_Acid_Score" = citric.acid, "Cysteine_Methionine_Score" = cysteine.methionine, "Ester_Lipid_Score" = ester.lipid, "Fatty_Acid_Score" = fatty.acid, "Fructose_Mannose_Score" = fructose.mannose, "Galactose_Score" = galactose, "Glutathione_Score" = glutathione, "Glycerolipid_Score" = glycerolipid, "Glycerophospholipid_Score" = glycerophospholipid, "Glycine_Serine_Threonine_Score" = glycine.serine.threonine, "Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin, "Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan, "Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin, "Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate, "Histidine_Score" = histidine, "Linoleic_Acid_Score" = linoleic.acid, "Lysine_Degradation_Score" = lysine.degredation, "Pentose_Phos_Score" = pentose.phos, "Phenylalanine_Score" = phenylalanine, "Propanoate_Score" = propanoate.metabolism, "Purine_Score" = purine, "Pyrimidine_Score" = pyrimidine, "Pyruvate_Score" = pyruvate, "Sphingolipid_Score" = sphingolipid, "Starch_Sucrose_Score" = starch.sucrose, "Taurine_Hypotaurine_Score" = taurine.hypotaurine, "Tryptophan_Score" = tryptophan, "Tyrosine_Score" = tyrosine, "Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine
)
tryptophan <- read.table("gene_lists/tryptophan.txt")
tryptophan <- list("tryptophan" = tryptophan$V1)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate, "Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis, "Arachadonic_Acid_Score" = arachadonic.acid, "Arginine_Proline_Score" = arginine.proline, "Ascorbate_Aldarate_Score" = ascorbate.aldarate, "Butanoate_Score"= butanoate, "Citric_Acid_Score" = citric.acid, "Cysteine_Methionine_Score" = cysteine.methionine, "Ester_Lipid_Score" = ester.lipid, "Fatty_Acid_Score" = fatty.acid, "Fructose_Mannose_Score" = fructose.mannose, "Galactose_Score" = galactose, "Glutathione_Score" = glutathione, "Glycerolipid_Score" = glycerolipid, "Glycerophospholipid_Score" = glycerophospholipid, "Glycine_Serine_Threonine_Score" = glycine.serine.threonine, "Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin, "Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan, "Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin, "Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate, "Histidine_Score" = histidine, "Linoleic_Acid_Score" = linoleic.acid, "Lysine_Degradation_Score" = lysine.degredation, "Pentose_Phos_Score" = pentose.phos, "Phenylalanine_Score" = phenylalanine, "Propanoate_Score" = propanoate.metabolism, "Purine_Score" = purine, "Pyrimidine_Score" = pyrimidine, "Pyruvate_Score" = pyruvate, "Sphingolipid_Score" = sphingolipid, "Starch_Sucrose_Score" = starch.sucrose, "Taurine_Hypotaurine_Score" = taurine.hypotaurine, "Tryptophan_Score" = tryptophan, "Tyrosine_Score" = tyrosine, "Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine
)
View(metabolism.pathways)
#Metabolic Gene List
metabolism.pathway<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate, "Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis, "Arachadonic_Acid_Score" = arachadonic.acid, "Arginine_Proline_Score" = arginine.proline, "Ascorbate_Aldarate_Score" = ascorbate.aldarate, "Butanoate_Score"= butanoate, "Citric_Acid_Score" = citric.acid, "Cysteine_Methionine_Score" = cysteine.methionine, "Ester_Lipid_Score" = ester.lipid, "Fatty_Acid_Score" = fatty.acid, "Fructose_Mannose_Score" = fructose.mannose, "Galactose_Score" = galactose, "Glutathione_Score" = glutathione, "Glycerolipid_Score" = glycerolipid, "Glycerophospholipid_Score" = glycerophospholipid, "Glycine_Serine_Threonine_Score" = glycine.serine.threonine, "Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin, "Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan, "Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin, "Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate, "Histidine_Score" = histidine, "Linoleic_Acid_Score" = linoleic.acid, "Lysine_Degradation_Score" = lysine.degredation, "Pentose_Phos_Score" = pentose.phos, "Phenylalanine_Score" = phenylalanine, "Propanoate_Score" = propanoate.metabolism, "Purine_Score" = purine, "Pyrimidine_Score" = pyrimidine, "Pyruvate_Score" = pyruvate, "Sphingolipid_Score" = sphingolipid, "Starch_Sucrose_Score" = starch.sucrose, "Taurine_Hypotaurine_Score" = taurine.hypotaurine, "Tryptophan_Score" = tryptophan, "Tyrosine_Score" = tyrosine, "Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine
)
View(metabolism.pathway)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate, "Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis, "Arachadonic_Acid_Score" = arachadonic.acid, "Arginine_Proline_Score" = arginine.proline, "Ascorbate_Aldarate_Score" = ascorbate.aldarate, "Butanoate_Score"= butanoate, "Citric_Acid_Score" = citric.acid, "Cysteine_Methionine_Score" = cysteine.methionine, "Ester_Lipid_Score" = ester.lipid, "Fatty_Acid_Score" = fatty.acid, "Fructose_Mannose_Score" = fructose.mannose, "Galactose_Score" = galactose, "Glutathione_Score" = glutathione, "Glycerolipid_Score" = glycerolipid, "Glycerophospholipid_Score" = glycerophospholipid, "Glycine_Serine_Threonine_Score" = glycine.serine.threonine, "Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin, "Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan, "Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin, "Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate, "Histidine_Score" = histidine, "Linoleic_Acid_Score" = linoleic.acid, "Lysine_Degradation_Score" = lysine.degredation, "Pentose_Phos_Score" = pentose.phos, "Phenylalanine_Score" = phenylalanine, "Propanoate_Score" = propanoate.metabolism, "Purine_Score" = purine, "Pyrimidine_Score" = pyrimidine, "Pyruvate_Score" = pyruvate, "Sphingolipid_Score" = sphingolipid, "Starch_Sucrose_Score" = starch.sucrose, "Taurine_Hypotaurine_Score" = taurine.hypotaurine, "Tryptophan_Score" = tryptophan, "Tyrosine_Score" = tyrosine, "Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine
)
#name your dictionary
mydict <- dict()
#for loop to make each column a list
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
#make a list for the metabolic pathways and add in dictionary to make list of list
metabolism.pathways1 <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathways[[i]] = mydict[[i]]
}
View(metabolism.pathways)
#Metabolic Gene List
metabolism.pathways<-list("Glycolysis_Score"=glycolysis,
"Ox_Phos_Score"=oxphos,
"Alanine_Aspartate_Glutamate_Score" = alanine.aspartate, "Aminoacyl_tRNA_Biosynthesis_Score" = aminoacyl.tRNA.biosynthesis, "Arachadonic_Acid_Score" = arachadonic.acid, "Arginine_Proline_Score" = arginine.proline, "Ascorbate_Aldarate_Score" = ascorbate.aldarate, "Butanoate_Score"= butanoate, "Citric_Acid_Score" = citric.acid, "Cysteine_Methionine_Score" = cysteine.methionine, "Ester_Lipid_Score" = ester.lipid, "Fatty_Acid_Score" = fatty.acid, "Fructose_Mannose_Score" = fructose.mannose, "Galactose_Score" = galactose, "Glutathione_Score" = glutathione, "Glycerolipid_Score" = glycerolipid, "Glycerophospholipid_Score" = glycerophospholipid, "Glycine_Serine_Threonine_Score" = glycine.serine.threonine, "Glycosaminoglycan_Biosynthesis_Chondroitin_Score" = glycosaminoglycan.biosynthesis.chondroitin, "Glycosaminoglycan_Biosynthesis_Herapan_Score" = glycosaminoglycan.biosynthesis.heparan, "Glycosaminoglycan_Biosynthesis_Keratin_Score" = glycosaminoglycan.biosynthesis.keratin, "Glyoxylate_Dicarboxylate_Score" = glyoxylate.dicarboxylate, "Histidine_Score" = histidine, "Linoleic_Acid_Score" = linoleic.acid, "Lysine_Degradation_Score" = lysine.degredation, "Pentose_Phos_Score" = pentose.phos, "Phenylalanine_Score" = phenylalanine, "Propanoate_Score" = propanoate.metabolism, "Purine_Score" = purine, "Pyrimidine_Score" = pyrimidine, "Pyruvate_Score" = pyruvate, "Sphingolipid_Score" = sphingolipid, "Starch_Sucrose_Score" = starch.sucrose, "Taurine_Hypotaurine_Score" = taurine.hypotaurine, "Tryptophan_Score" = tryptophan, "Tyrosine_Score" = tyrosine, "Valine_Leucine_Isoleucine_Score" = valine.leucine.isoleucine
)
#set the DefaultAssay
DefaultAssay(Norm.BRCA)<-"RNA"
for (i in 1:length(metabolism.pathways)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathways[[i]],
name = paste(names(metabolism.pathways[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
}
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
plot_grid(plotlist = metabolism.vln.plots,ncol = 2)
plot_grid(plotlist = metabolism.vln.plots,ncol = 37)
plot_grid(plotlist = metabolism.vln.plots,ncol = 5)
plot_grid(plotlist = metabolism.vln.plots,ncol = 2)
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
library(ggplot2)
library(cowplot)
#set the DefaultAssay
DefaultAssay(Norm.BRCA)<-"RNA"
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
Norm.BRCA <- norm.brca.integrated.epithelial
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
View(metabolism.box.plots)
metabolism .box.plot.matrix<-FetchData(Norm.BRCA,
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
plot_grid(plotlist = metabolism.box.plots,ncol = 2)
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
plot_grid(plotlist = metabolism.box.plots,ncol = 2)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
View(metabolism.pathway)
#Add scores and plotting for the metabolism gene lists via a for loop
metabolism.vln.plots<-list()
metabolism.box.plots<-list()
for (i in 1:length(metabolism.pathways)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathways[[i]],
name = paste(names(metabolism.pathways[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
}
load("seurat-objects/norm.brca.integrated.epithelial.Rda")
Norm.BRCA <- norm.brca.integrated.epithelial
#Add scores and plotting for the metabolism gene lists via a for loop
metabolism.vln.plots<-list()
metabolism.box.plots<-list()
for (i in 1:length(metabolism.pathways)){
Norm.BRCA <- AddModuleScore(object = Norm.BRCA,
features = metabolism.pathways[[i]],
name = paste(names(metabolism.pathways[i])),
assay = "RNA")
print(paste("Calculating",names(metabolism.pathways[i])))
metabolism.vln.plots[i] <- VlnPlot(object = Norm.BRCA,
features = paste(names(metabolism.pathways[i]),"1",sep = ""),
group.by = "Cell.Type",
split.by = "Status",
pt.size = 0,
combine = FALSE)
metabolism.box.plot.matrix<-FetchData(Norm.BRCA,
c(paste(names(metabolism.pathways[i]),"1",sep = ""),
"Cell.Type", "Status"))
print(head(metabolism.box.plot.matrix))
metabolism.box.plots[[i]] <- ggplot(metabolism.box.plot.matrix,
aes(x=metabolism.box.plot.matrix[,2],
y=metabolism.box.plot.matrix[,1],
fill=metabolism.box.plot.matrix[,3]))+
geom_boxplot()+
ggtitle(paste(names(metabolism.pathways[i])))+
xlab("") + ylab("Gene Score")+
theme_classic()+
theme(legend.title = element_blank())
}
#name your dictionary
mydict <- dict()
#for loop to make each column a list
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
#make a list for the metabolic pathways and add in dictionary to make list of list
metabolism.pathways1 <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathways[[i]] = mydict[[i]]
}
View(metabolism.pathways)
#make a list for the metabolic pathways and add in dictionary to make list of list
metabolism.pathways1 <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathway1[[i]] = mydict[[i]]
}
#for loop to make each column a list
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
View(mydict)
#for loop to make each column a list
for(i in colnames(rest_genes_V)){
mydict[[i]] <- lapply(as.list(rest_genes_V[i]), function(x) x[!x %in% ""])
}
#make a list for the metabolic pathways and add in dictionary to make list of lists
metabolism.pathways <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathways[[i]] = mydict[[i]]
}
View(metabolism.pathways)
View(metabolism.box.plots)
View(metabolism.pathway)
View(metabolism.pathways)
View(metabolism.pathways)
#make a list for the metabolic pathways and add in dictionary to make list of lists
metabolism.pathway <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathway[[i]] = mydict[[i]]
}
#make a list for the metabolic pathways and add in dictionary to make list of lists
ametabolism.pathway <- list()
for(i in colnames(rest_genes_V)){
ametabolism.pathway[[i]] = mydict[[i]]
}
View(ametabolism.pathway)
#make a list for the metabolic pathways and add in dictionary to make list of lists
metabolism.pathway <- list()
for(i in colnames(rest_genes_V)){
metabolism.pathway[[i]] = mydict[[i]]
}
install.packages("Seurat")
library(Seurat)
library(Seurat)
library(dplyr)
library(reshape2)
library(SeuratData)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
colnames(norm.brca.epithelial.object@meta.data)
#HCI001
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci001.seurat3.object.Rda")
#HCI002
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci002.seurat3.object.Rda")
#HCI010
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/hci010.seurat3.object.Rda")
#Norm/BRCA
load("/Users/paigehalas/ph-future-phd/pdx-norm-brca-integration-project/seurat-objects/norm.brca.integrated.epithelial.Rda")
p01.cc.updated@assays$expected.counts
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
#SplitObject command will generate subsets of a Seurat object in list form based on the given metadata column. For this, we subset on the "Compartment" column, to generate two new objects, the epithelial compartment and the stromal compartment
norm.brca.subset.objects<-SplitObject(norm.brca.integrated.epithelial,"Compartment")
#We now seperate out each component of the list into seperate Seurat objects. The "$" command specifies which part of the full list we want to access.
norm.brca.epithelial.object<-norm.brca.subset.objects$EPITHELIAL
norm.brca.stromal.object<-norm.brca.subset.objects$STROMAL
#To construct a reference, we will identify ‘anchors’ between the individual datasets. First, we combine each Seurat object into a list, with each dataset as an element.
#The list() function groups elements together in the form of list("X1"=Y1,"X2",Y2,...), where Xn is the name you want the list element to be called and Yn is the component you want added to the list. For this analysis, we want to keep track of which Seurat object belongs to which model/patient.
#first part
#Norm.BRCA dataset needs to be on the RNA matrix like the other three PDX model datasets
#DefaultAssay(norm.brca.epithelial.object) <- "RNA"
standard.workflow.object.list <-
#list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated)
list("hci001"=p01.cc.updated,"hci002"=p02.updated,"hci010"=p10.updated,"norm"=norm.brca.epithelial.object)
?DefaultAssay
DefaultAssay(p01.cc.updated) <- "expected.counts"
p02.updated@assays$expected.counts
p10.updated@assays$expected.counts
DefaultAssay(p01.cc.updated) <- "expected.counts"
DefaultAssay(p02.updated) <- "expected.counts"
DefaultAssay(p10.updated) <- "expected.counts"
ActiveAssay(p01.cc.updated)
?Activeassay
?activeassay
DefaultAssay(p01.cc.updated)
DefaultAssay(p02.updated)
DefaultAssay(p10.updated)
#Prior to finding anchors, we perform standard preprocessing (log-normalization), and identify variable features individually for each. Note that Seurat v3 implements an improved method for variable feature selection based on a variance stabilizing transformation ("vst")
for (i in 1:length(standard.workflow.object.list)) {
standard.workflow.object.list[[i]] <- NormalizeData(standard.workflow.object.list[[i]], verbose = TRUE)
standard.workflow.object.list[[i]] <- FindVariableFeatures(standard.workflow.object.list[[i]], selection.method = "vst",
nfeatures = 2000, verbose = TRUE)
}
#Next we find anchors, which are pairwise correspondants between individual cells which originate from the same biological state. These anchors are then used to transfer infromation from one dataset to another
reference.list <- standard.workflow.object.list
integration.anchors <- FindIntegrationAnchors(object.list = reference.list, dims = 1:30)
#After
integrated.data <- IntegrateData(anchorset = integration.anchors, dims = 1:30)
#load necessary packages for visualization
library(ggplot2)
library(cowplot)
library(patchwork)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
#DefaultAssay(integrated.data) <- "integrated"
#set Default Assay to be the expected counts
DefaultAssay(integrated.data) <- "expected.counts"
integrated.data@assays$expected.counts
DefaultAssay(integrated.data)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
#DefaultAssay(integrated.data) <- "integrated"
#set Default Assay to be the expected counts
DefaultAssay(integrated.data) <- "expected.counts"
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
memory.limit()
gc()
rm(norm.brca.integrated.epithelial)
rm(norm.brca.subset.objects)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
rm(p01.cc.updated)
rm(p02.updated)
rm(p10.updated)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
rm(norm.brca.epithelial.object)
rm(standard.workflow.object.list)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
rm(reference.list)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
rm(i)
rm(norm.brca.stromal.object)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
PCA.integrated.data<- RunPCA(scale.integrated.data, npcs = 30, verbose = TRUE)
UMAP.integrated.data <- RunUMAP(PCA.integrated.data, reduction = "pca", dims = 1:30)
DimPlot(UMAP.integrated.data, reduction = "umap", label = TRUE, group.by = "Combined_Cell_Type")
R_MAX_V_SIZE=1Gb
R_MAX_V_SIZE = 1Gb
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
open.Renviron
touch.Renviron
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
# switch to integrated assay. The variable features of this assay are automatically
# set during IntegrateData
#DefaultAssay(integrated.data) <- "integrated"
#set Default Assay to be the expected counts
DefaultAssay(integrated.data) <- "expected.counts"
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv(".Renviron")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
save(integrated.data, file = "/Users/paigehalas/Desktop/integrated.data.new")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv("R_MAX_VSIZE")
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.setenv("R_MAX_VSIZE" = 8e9)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv("R_MAX_VSIZE")
Sys.setenv("R_MAX_VSIZE" = 1GB)
Sys.setenv("R_MAX_VSIZE" = 12288)
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.setenv("R_MAX_VSIZE" = 4000)
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
Sys.getenv("R_MAX_VSIZE")
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
scale.integrated.data <- ScaleData(integrated.data, verbose = TRUE)
